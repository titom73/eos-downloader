{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#arista-software-downloader","title":"Arista Software Downloader","text":""},{"location":"#overview","title":"Overview","text":"<p>A project to download Arista softwares to local folder, Cloudvision or EVE-NG. It comes in 2 way: a framework with object to automate Arista software download and a CLI for human activities.</p> <p></p> <p>Caution</p> <p>This script should not be deployed on EOS device. If you do that, there is no support to expect from Arista TAC team.</p> <pre><code># install eos-downloader from pypi\npip install eos-downloader\n\n# download EOS swi for EOS 64bits\nardl --token &lt;your-token&gt; get eos --format 64 --latest --release-type M\n</code></pre> <p>Full documentation is available on our website.</p>"},{"location":"#download-eos-package-from-arista-website","title":"Download EOS package from arista website","text":"<p>This command gives you option to download EOS images localy. Some options are available based on image type like importing your cEOS container in your local registry</p> <pre><code># Get latest version of EOS using docker format.\nardl get eos --latest --format cEOS\n\n# Get latest version of maintenance type in specific branch 4.29\nardl get eos --branch 4.29 --format cEOS --release-type M\n\n# Get a specific version\nardl get eos --version 4.29.4M\n\n# Get a specific version and import to docker using default arista/ceos:{version}{release_type}\nardl get eos --version 4.29.4M --import-docker\n\n# Get a specific version and import to EVE-NG\nardl get eos --version 4.33.0F --eve-ng\n</code></pre>"},{"location":"#author","title":"Author","text":"<p>From an original idea of @Mark Rayson in arista-netdevops-community/eos-scripts</p>"},{"location":"#license","title":"License","text":"<p>Code is under Apache2 License</p>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#docker-image","title":"Docker Image","text":"<p>A docker image is also available when Python cannot be used.</p>"},{"location":"docker/#connect-to-your-docker-container","title":"Connect to your docker container","text":"<pre><code>$ docker pull titom73/eos-downloader:edge\ndocker run -it --rm --entrypoint bash titom73/eos-downloader:dev\nroot@a9a8ceb533df:/local# ardl get eos --help\n$ cd /download\n$ ardl --token xxxx get eos --image-format cEOS --version 4.28.3M\n</code></pre>"},{"location":"docker/#use-cli-with-docker","title":"Use CLI with docker","text":"<pre><code>docker run --rm titom73/eos-downloader:dev get eos --help\nUsage: ardl get eos [OPTIONS]\n\n  Download EOS image from Arista website\n\nOptions:\n  --image-type [64|INT|2GB-INT|cEOS|cEOS64|vEOS|vEOS-lab|EOS-2GB|default]\n                                  EOS Image type  [required]\n  --version TEXT                  EOS version  [required]\n  --docker-name TEXT              Docker image name (default: arista/ceos)\n                                  [default: arista/ceos]\n  --output PATH                   Path to save image  [default: .]\n  --log-level, --log [debug|info|warning|error|critical]\n                                  Logging level of the command\n  --eve-ng / --no-eve-ng          Run EVE-NG vEOS provisioning (only if CLI\n                                  runs on an EVE-NG server)\n  --disable-ztp / --no-disable-ztp\n                                  Disable ZTP process in vEOS image (only\n                                  available with --eve-ng)\n  --import-docker / --no-import-docker\n                                  Import docker image (only available with\n                                  --image_type cEOSlab)\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"docker/#available-tags","title":"Available TAGS","text":"<ul> <li><code>edge</code>: Latest version built from the main branch</li> <li><code>latest</code>: Latest stable Version</li> <li><code>semver</code>: Version built from git tag</li> <li><code>latest-dind</code>: Latest stable Version with docker CLI</li> <li><code>semver-dind</code>: Version built from git tag with docker CLI</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"faq/#caching-and-performance","title":"Caching and Performance","text":""},{"location":"faq/#how-does-the-cache-work","title":"How does the cache work?","text":"<p>eos-downloader implements smart caching at two levels:</p> <ol> <li> <p>File Caching: Before downloading, the tool checks if the file already exists in the output directory. If found, it reuses the existing file instead of re-downloading.</p> </li> <li> <p>Docker Image Caching: Before importing a cEOS image, the tool checks if the <code>image:tag</code> already exists in your local Docker registry. If found, it skips the import.</p> </li> </ol>"},{"location":"faq/#how-do-i-force-re-download-or-re-import","title":"How do I force re-download or re-import?","text":"<p>Use the <code>--force</code> flag:</p> <pre><code># Force re-download even if file exists\nardl get eos --version 4.29.4M --force\n\n# Force re-import Docker image even if it exists\nardl get eos --version 4.29.4M --format cEOS --import-docker --force\n</code></pre>"},{"location":"faq/#does-cache-checking-work-with-podman","title":"Does cache checking work with Podman?","text":"<p>Yes! The Docker image cache checking automatically detects and works with both <code>docker</code> and <code>podman</code> commands.</p>"},{"location":"faq/#where-are-cached-files-stored","title":"Where are cached files stored?","text":"<p>Cached files are stored in the directory specified by the <code>--output</code> option (default: current directory). The cache is per-directory, so using different output directories creates separate caches.</p>"},{"location":"faq/#how-can-i-verify-cached-files-are-valid","title":"How can I verify cached files are valid?","text":"<p>Currently, file caching uses simple existence checks. For production use, you can:</p> <ol> <li> <p>Use the built-in checksum validation after download: </p><pre><code>ardl get eos --version 4.29.4M\n# Tool automatically validates md5/sha512 if available\n</code></pre><p></p> </li> <li> <p>Use <code>--force</code> to ensure a fresh download when integrity is critical.</p> </li> </ol>"},{"location":"faq/#does-dry-run-mode-respect-the-cache","title":"Does dry-run mode respect the cache?","text":"<p>Yes! When using <code>--dry-run</code>, the tool will report whether it would use cached files or perform actual downloads:</p> <pre><code>ardl get eos --version 4.29.4M --dry-run\n# Output: [DRY-RUN] Would use cached file: EOS-4.29.4M.swi\n</code></pre>"},{"location":"faq/#eve-ng-with-openssl-issue","title":"EVE-NG with OpenSSL issue.","text":"<p>On EVE-NG, you may have to install/upgrade pyOpenSSL in version <code>23.0.0</code>:</p> <pre><code># Error when running ardl: AttributeError: module 'lib' has no attribute 'X509_V_FLAG_CB_ISSUER_CHECK'\n\n$ pip install pyopenssl --upgrade\n</code></pre>"},{"location":"api/defaults/","title":"Defaults","text":""},{"location":"api/defaults/#eos_downloader.defaults","title":"defaults","text":"<p>Default values for eos_downloader.</p> <p>This module contains default configuration values used by the eos_downloader package.</p> <p>Attributes:</p> Name Type Description <code>DEFAULT_REQUEST_HEADERS</code> <code>dict</code> <p>Default HTTP headers used for API requests. Contains Content-Type and User-Agent headers.</p> <code>DEFAULT_SOFTWARE_FOLDER_TREE</code> <code>str</code> <p>API endpoint URL for retrieving the EOS software folder structure.</p> <code>DEFAULT_DOWNLOAD_URL</code> <code>str</code> <p>API endpoint URL for getting download links for EOS images.</p> <code>DEFAULT_SERVER_SESSION</code> <code>str</code> <p>API endpoint URL for obtaining session codes from Arista\u2019s servers.</p> <code>EVE_QEMU_FOLDER_PATH</code> <code>str</code> <p>Path to the folder where the downloaded EOS images will be stored on an EVE-NG server.</p>"},{"location":"api/helpers/","title":"Helpers","text":""},{"location":"api/helpers/#eos_downloader.helpers","title":"helpers","text":"<p>A module for managing file downloads with progress tracking in the console.</p> <p>This module provides functionality for downloading files with visual progress indicators using the Rich library. It includes a signal handler for graceful interruption and a DownloadProgressBar class for concurrent file downloads with progress tracking.</p> <p>Classes:</p> Name Description <code>    DownloadProgressBar: A class that provides visual progress tracking for file downloads.</code> <p>Functions:</p> Name Description <code>handle_sigint: Signal handler for SIGINT</code> <p>console (Console): Rich Console instance for output rendering. done_event (Event): Threading Event used for signaling download interruption.</p>"},{"location":"api/helpers/#eos_downloader.helpers.DownloadProgressBar","title":"DownloadProgressBar","text":"<pre><code>DownloadProgressBar()\n</code></pre> <p>A progress bar for downloading files.</p> <p>This class provides a visual progress indicator for file downloads using the Rich library. It supports downloading multiple files concurrently with a progress bar showing download speed, completion percentage, and elapsed time.</p> <p>Attributes:</p> Name Type Description <code>progress</code> <code>Progress</code> <p>A Rich Progress instance configured with custom columns for displaying download information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; downloader = DownloadProgressBar()\n&gt;&gt;&gt; urls = ['http://example.com/file1.zip', 'http://example.com/file2.zip']\n&gt;&gt;&gt; downloader.download(urls, '/path/to/destination')\n</code></pre> Source code in <code>eos_downloader/helpers/__init__.py</code> <pre><code>def __init__(self) -&gt; None:\n    self.progress = Progress(\n        TextColumn(\n            \"\ud83d\udcbe  Downloading [bold blue]{task.fields[filename]}\", justify=\"right\"\n        ),\n        BarColumn(bar_width=None),\n        \"[progress.percentage]{task.percentage:&gt;3.1f}%\",\n        \"\u2022\",\n        TransferSpeedColumn(),\n        \"\u2022\",\n        DownloadColumn(),\n        \"\u2022\",\n        TimeElapsedColumn(),\n        \"\u2022\",\n        console=console,\n    )\n</code></pre>"},{"location":"api/helpers/#eos_downloader.helpers.DownloadProgressBar.download","title":"download","text":"<pre><code>download(urls: Iterable[str], dest_dir: str) -&gt; None\n</code></pre> <p>Download files from URLs concurrently to a destination directory.</p> <p>This method downloads files from the provided URLs in parallel using a thread pool, displaying progress for each download in the console.</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>Iterable[str]</code> <p>An iterable of URLs to download files from.</p> required <code>dest_dir</code> <code>str</code> <p>The destination directory where files will be saved.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; downloader = DownloadProgressBar()\n&gt;&gt;&gt; urls = [\"http://example.com/file1.txt\", \"http://example.com/file2.txt\"]\n&gt;&gt;&gt; downloader.download(urls, \"/path/to/destination\")\n</code></pre> Source code in <code>eos_downloader/helpers/__init__.py</code> <pre><code>def download(self, urls: Iterable[str], dest_dir: str) -&gt; None:\n    \"\"\"Download files from URLs concurrently to a destination directory.\n\n    This method downloads files from the provided URLs in parallel using a thread pool,\n    displaying progress for each download in the console.\n\n    Parameters\n    ----------\n    urls : Iterable[str]\n        An iterable of URLs to download files from.\n    dest_dir : str\n        The destination directory where files will be saved.\n\n    Returns\n    -------\n    None\n\n    Examples\n    --------\n    &gt;&gt;&gt; downloader = DownloadProgressBar()\n    &gt;&gt;&gt; urls = [\"http://example.com/file1.txt\", \"http://example.com/file2.txt\"]\n    &gt;&gt;&gt; downloader.download(urls, \"/path/to/destination\")\n    \"\"\"\n    with self.progress:\n        with ThreadPoolExecutor(max_workers=4) as pool:\n            futures = []\n            for url in urls:\n                filename = url.split(\"/\")[-1].split(\"?\")[0]\n                dest_path = os.path.join(dest_dir, filename)\n                task_id = self.progress.add_task(\n                    \"download\", filename=filename, start=False\n                )\n                futures.append(pool.submit(self._copy_url, task_id, url, dest_path))\n\n            for future in futures:\n                future.result()  # Wait for all downloads to complete\n</code></pre>"},{"location":"api/helpers/#eos_downloader.helpers.handle_sigint","title":"handle_sigint","text":"<pre><code>handle_sigint(signum: Any, frame: Any) -&gt; None\n</code></pre> <p>Signal handler for SIGINT (Ctrl+C).</p> <p>This function sets the done_event flag when SIGINT is received, allowing for graceful termination of the program.</p> <p>Parameters:</p> Name Type Description Default <code>signum</code> <code>Any</code> <p>Signal number.</p> required <code>frame</code> <code>Any</code> <p>Current stack frame object.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/helpers/__init__.py</code> <pre><code>def handle_sigint(signum: Any, frame: Any) -&gt; None:\n    \"\"\"\n    Signal handler for SIGINT (Ctrl+C).\n\n    This function sets the done_event flag when SIGINT is received,\n    allowing for graceful termination of the program.\n\n    Parameters\n    ----------\n    signum : Any\n        Signal number.\n    frame : Any\n        Current stack frame object.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    done_event.set()\n</code></pre>"},{"location":"api/logics/arista_server/","title":"Arista Server","text":""},{"location":"api/logics/arista_server/#eos_downloader.logics.arista_server","title":"arista_server","text":"<p>Server module for handling interactions with Arista software download portal.</p> <p>This module provides the AristaServer class which manages authentication and file retrieval operations with the Arista software download portal. It handles session management, XML data retrieval, and download URL generation.</p> <p>Classes:</p> Name Description <code>AristaServer</code> <p>Main class for interacting with the Arista software portal.</p> Dependencies <ul> <li>base64: For encoding authentication tokens</li> <li>json: For handling JSON data in requests</li> <li>xml.etree.ElementTree: For parsing XML responses</li> <li>loguru: For logging</li> <li>requests: For making HTTP requests</li> </ul> Example <pre><code>&gt;&gt;&gt; from eos_downloader.logics.server import AristaServer\n&gt;&gt;&gt; server = AristaServer(token='my_auth_token')\n&gt;&gt;&gt; server.authenticate()\n&gt;&gt;&gt; xml_data = server.get_xml_data()\n&gt;&gt;&gt; download_url = server.get_url('/path/to/file')\n</code></pre> Notes <p>The module requires valid authentication credentials to interact with the Arista portal. All server interactions are performed over HTTPS and follow Arista\u2019s API specifications.</p>"},{"location":"api/logics/arista_server/#eos_downloader.logics.arista_server.AristaServer","title":"AristaServer","text":"<pre><code>AristaServer(\n    token: Union[str, None] = None,\n    timeout: int = 5,\n    session_server: str = eos_downloader.defaults.DEFAULT_SERVER_SESSION,\n    headers: Dict[\n        str, Any\n    ] = eos_downloader.defaults.DEFAULT_REQUEST_HEADERS,\n    xml_url: str = eos_downloader.defaults.DEFAULT_SOFTWARE_FOLDER_TREE,\n    download_server: str = eos_downloader.defaults.DEFAULT_DOWNLOAD_URL,\n)\n</code></pre> <p>AristaServer class to handle authentication and interactions with Arista software download portal.</p> <p>This class provides methods to authenticate with the Arista software portal, retrieve XML data containing available software packages, and generate download URLs for specific files.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>(str, optional)</code> <p>Authentication token for Arista portal access</p> <code>timeout</code> <code>int, default=5</code> <p>Timeout in seconds for HTTP requests</p> <code>session_server</code> <code>str</code> <p>URL of the authentication server</p> <code>headers</code> <code>Dict[str, any]</code> <p>HTTP headers to use in requests</p> <code>xml_url</code> <code>str</code> <p>URL to retrieve software package XML data</p> <code>download_server</code> <code>str</code> <p>Base URL for file downloads</p> <code>_session_id</code> <code>str</code> <p>Session ID obtained after authentication</p> <p>Methods:</p> Name Description <code>authenticate</code> <p>Authenticates with the Arista portal using provided or stored token</p> <code>get_xml_data</code> <p>Retrieves XML data containing available software packages</p> <code>get_url</code> <p>Generates download URL for a specific file path</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>When authentication fails due to invalid or expired token</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Union[str, None]</code> <p>Authentication token. Defaults to None.</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Request timeout in seconds. Defaults to 5.</p> <code>5</code> <code>session_server</code> <code>str</code> <p>URL of the session server. Defaults to DEFAULT_SERVER_SESSION.</p> <code>DEFAULT_SERVER_SESSION</code> <code>headers</code> <code>Dict[str, any]</code> <p>HTTP headers for requests. Defaults to DEFAULT_REQUEST_HEADERS.</p> <code>DEFAULT_REQUEST_HEADERS</code> <code>xml_url</code> <code>str</code> <p>URL of the software folder tree XML. Defaults to DEFAULT_SOFTWARE_FOLDER_TREE.</p> <code>DEFAULT_SOFTWARE_FOLDER_TREE</code> <code>download_server</code> <code>str</code> <p>Base URL for downloads. Defaults to DEFAULT_DOWNLOAD_URL.</p> <code>DEFAULT_DOWNLOAD_URL</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/arista_server.py</code> <pre><code>def __init__(\n    self,\n    token: Union[str, None] = None,\n    timeout: int = 5,\n    session_server: str = eos_downloader.defaults.DEFAULT_SERVER_SESSION,\n    headers: Dict[str, Any] = eos_downloader.defaults.DEFAULT_REQUEST_HEADERS,\n    xml_url: str = eos_downloader.defaults.DEFAULT_SOFTWARE_FOLDER_TREE,\n    download_server: str = eos_downloader.defaults.DEFAULT_DOWNLOAD_URL,\n) -&gt; None:\n    \"\"\"Initialize the Server class with optional parameters.\n\n    Parameters\n    ----------\n    token : Union[str, None], optional\n        Authentication token. Defaults to None.\n    timeout : int, optional\n        Request timeout in seconds. Defaults to 5.\n    session_server : str, optional\n        URL of the session server. Defaults to DEFAULT_SERVER_SESSION.\n    headers : Dict[str, any], optional\n        HTTP headers for requests. Defaults to DEFAULT_REQUEST_HEADERS.\n    xml_url : str, optional\n        URL of the software folder tree XML. Defaults to DEFAULT_SOFTWARE_FOLDER_TREE.\n    download_server : str, optional\n        Base URL for downloads. Defaults to DEFAULT_DOWNLOAD_URL.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.token: Union[str, None] = token\n    self._session_server = session_server\n    self._headers = headers\n    self._timeout = timeout\n    self._xml_url = xml_url\n    self._download_server = download_server\n    self._session_id = None\n\n    logging.info(f\"Initialized AristaServer with headers: {self._headers}\")\n</code></pre>"},{"location":"api/logics/arista_server/#eos_downloader.logics.arista_server.AristaServer.authenticate","title":"authenticate","text":"<pre><code>authenticate(token: Union[str, None] = None) -&gt; bool\n</code></pre> <p>Authenticate to the API server using access token.</p> <p>The token is encoded in base64 and sent to the server for authentication. A session ID is retrieved from the server response if authentication is successful.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Union[str, None]</code> <p>Access token for authentication. If None, uses existing token stored in instance. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if authentication successful, False otherwise</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If access token is invalid or expired</p> Source code in <code>eos_downloader/logics/arista_server.py</code> <pre><code>def authenticate(self, token: Union[str, None] = None) -&gt; bool:\n    \"\"\"Authenticate to the API server using access token.\n\n    The token is encoded in base64 and sent to the server for authentication.\n    A session ID is retrieved from the server response if authentication is successful.\n\n    Parameters\n    ----------\n    token : Union[str, None], optional\n        Access token for authentication. If None, uses existing token stored in instance. Defaults to None.\n\n    Returns\n    -------\n    bool\n        True if authentication successful, False otherwise\n\n    Raises\n    ------\n    eos_downloader.exceptions.AuthenticationError\n        If access token is invalid or expired\n    \"\"\"\n\n    if token is not None:\n        self.token = token\n    if self.token is None:\n        logger.error(\"No token provided for authentication\")\n        return False\n    credentials = (base64.b64encode(self.token.encode())).decode(\"utf-8\")\n    jsonpost = {\"accessToken\": credentials}\n    result = requests.post(\n        self._session_server,\n        data=json.dumps(jsonpost),\n        timeout=self._timeout,\n        headers=self._headers,\n    )\n    if result.json()[\"status\"][\"message\"] in [\n        \"Access token expired\",\n        \"Invalid access token\",\n    ]:\n        logging.critical(\n            f\"Authentication failed: {result.json()['status']['message']}\"\n        )\n        raise eos_downloader.exceptions.AuthenticationError\n        # return False\n    try:\n        if \"data\" in result.json():\n            self._session_id = result.json()[\"data\"][\"session_code\"]\n            logging.info(f\"Authenticated with session ID: {self._session_id}\")\n            return True\n    except KeyError as error:\n        logger.error(\n            f\"Key Error in parsing server response ({result.json()}): {error}\"\n        )\n        return False\n    return False\n</code></pre>"},{"location":"api/logics/arista_server/#eos_downloader.logics.arista_server.AristaServer.get_url","title":"get_url","text":"<pre><code>get_url(remote_file_path: str) -&gt; Union[str, None]\n</code></pre> <p>Get download URL for a remote file from server.</p> <p>This method retrieves the download URL for a specified remote file by making a POST request to the server. If not authenticated, it will first authenticate before making the request.</p> <p>Parameters:</p> Name Type Description Default <code>remote_file_path</code> <code>str</code> <p>Path to the remote file on server to get download URL for</p> required <p>Returns:</p> Type Description <code>Union[str, None]</code> <p>The download URL if successful, None if request fails or URL not found in response</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the request to server fails</p> <code>JSONDecodeError</code> <p>If server response is not valid JSON</p> <code>Timeout</code> <p>If server request times out</p> Source code in <code>eos_downloader/logics/arista_server.py</code> <pre><code>def get_url(self, remote_file_path: str) -&gt; Union[str, None]:\n    \"\"\"Get download URL for a remote file from server.\n\n    This method retrieves the download URL for a specified remote file by making a POST request\n    to the server. If not authenticated, it will first authenticate before making the request.\n\n    Parameters\n    ----------\n    remote_file_path : str\n        Path to the remote file on server to get download URL for\n\n    Returns\n    -------\n    Union[str, None]\n        The download URL if successful, None if request fails or URL not found in response\n\n    Raises\n    ------\n    requests.exceptions.RequestException\n        If the request to server fails\n    json.JSONDecodeError\n        If server response is not valid JSON\n    requests.exceptions.Timeout\n        If server request times out\n    \"\"\"\n\n    logging.info(f\"Getting download URL for {remote_file_path}\")\n    if self._session_id is None:\n        logging.debug(\"Not authenticated to server, start authentication process\")\n        self.authenticate()\n    jsonpost = {\"sessionCode\": self._session_id, \"filePath\": remote_file_path}\n    result = requests.post(\n        self._download_server,\n        data=json.dumps(jsonpost),\n        timeout=self._timeout,\n        headers=self._headers,\n    )\n    if \"data\" in result.json() and \"url\" in result.json()[\"data\"]:\n        # logger.debug('URL to download file is: {}', result.json())\n        logging.info(\"Download URL received from server\")\n        logging.debug(f'URL to download file is: {result.json()[\"data\"][\"url\"]}')\n        return result.json()[\"data\"][\"url\"]\n    return None\n</code></pre>"},{"location":"api/logics/arista_server/#eos_downloader.logics.arista_server.AristaServer.get_xml_data","title":"get_xml_data","text":"<pre><code>get_xml_data() -&gt; Union[ET.ElementTree, None]\n</code></pre> <p>Retrieves XML data from the server.</p> <p>This method fetches XML data by making a POST request to the server\u2019s XML endpoint. If not already authenticated, it will initiate the authentication process first.</p> <p>Returns:</p> Type Description <code>ElementTree</code> <p>An ElementTree object containing the parsed XML data from the server response.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the server response doesn\u2019t contain the expected data structure.</p> Notes <p>The method requires a valid session ID which is obtained through authentication. The XML data is expected to be in the response JSON under data.xml path.</p> Source code in <code>eos_downloader/logics/arista_server.py</code> <pre><code>def get_xml_data(self) -&gt; Union[ET.ElementTree, None]:\n    \"\"\"Retrieves XML data from the server.\n\n    This method fetches XML data by making a POST request to the server's XML endpoint.\n    If not already authenticated, it will initiate the authentication process first.\n\n    Returns\n    -------\n    ET.ElementTree\n        An ElementTree object containing the parsed XML data from the server response.\n\n    Raises\n    ------\n    KeyError\n        If the server response doesn't contain the expected data structure.\n\n    Notes\n    -----\n    The method requires a valid session ID which is obtained through authentication.\n    The XML data is expected to be in the response JSON under data.xml path.\n    \"\"\"\n\n    logging.info(f\"Getting XML data from server {self._session_server}\")\n    if self._session_id is None:\n        logging.debug(\"Not authenticated to server, start authentication process\")\n        self.authenticate()\n    jsonpost = {\"sessionCode\": self._session_id}\n    result = requests.post(\n        self._xml_url,\n        data=json.dumps(jsonpost),\n        timeout=self._timeout,\n        headers=self._headers,\n    )\n    try:\n        folder_tree = result.json()[\"data\"][\"xml\"]\n        logging.debug(\"XML data received from Arista server\")\n        root_element = ET.fromstring(folder_tree)\n        if root_element is None:\n            logger.error(\"Failed to parse XML data from server response\")\n            return None\n        return ET.ElementTree(root_element)\n    except KeyError as error:\n        logger.error(f\"Unkown key in server response: {error}\")\n        return None\n    except ET.ParseError as error:\n        logger.error(f\"Failed to parse XML from server response: {error}\")\n        return None\n</code></pre>"},{"location":"api/logics/arista_xml_server/","title":"Arista XML API","text":""},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server","title":"arista_xml_server","text":"<p>This module provides classes for managing and querying Arista XML data.</p> <p>Classes:     AristaXmlBase: Base class for Arista XML data management.     AristaXmlQuerier: Class to query Arista XML data for Software versions.     AristaXmlObject: Base class for Arista XML data management with specific software and version.     EosXmlObject: Class to query Arista XML data for EOS versions.</p>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlBase","title":"AristaXmlBase","text":"<pre><code>AristaXmlBase(\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n)\n</code></pre> <p>Base class for Arista XML data management.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Union[str, None]</code> <p>Authentication token. Defaults to None.</p> <code>None</code> <code>xml_path</code> <code>Union[str, None]</code> <p>Path to the XML file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def __init__(\n    self, token: Union[str, None] = None, xml_path: Union[str, None] = None\n) -&gt; None:\n    \"\"\"\n    Initialize the AristaXmlBase class.\n\n    Parameters\n    ----------\n    token : Union[str, None], optional\n        Authentication token. Defaults to None.\n    xml_path : Union[str, None], optional\n        Path to the XML file. Defaults to None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    logging.info(\"Initializing AristXmlBase.\")\n    self.server = eos_downloader.logics.arista_server.AristaServer(token=token)\n    if xml_path is not None:\n        try:\n            self.xml_data = ET.parse(xml_path)\n        except ET.ParseError as error:\n            logging.error(f\"Error while parsing XML data: {error}\")\n    else:\n        if self.server.authenticate():\n            data = self._get_xml_root()\n            if data is None:\n                logging.error(\"Unable to get XML data from Arista server\")\n                raise ValueError(\"Unable to get XML data from Arista server\")\n            # Ensure the XML data has a valid root element\n            if data.getroot() is None:\n                logging.error(\"XML data has no root element\")\n                raise ValueError(\"XML data has no root element\")\n            # At this point, we've validated that data has a valid root\n            self.xml_data = data  # type: ignore[assignment]\n        else:\n            logging.error(\"Unable to authenticate to Arista server\")\n            raise ValueError(\"Unable to authenticate to Arista server\")\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlObject","title":"AristaXmlObject","text":"<pre><code>AristaXmlObject(\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n)\n</code></pre> <p>               Bases: <code>AristaXmlBase</code></p> <p>Base class for Arista XML data management.</p> <p>Parameters:</p> Name Type Description Default <code>searched_version</code> <code>str</code> <p>The version of the software to search for.</p> required <code>image_type</code> <code>str</code> <p>The type of image to download.</p> required <code>token</code> <code>Union[str, None]</code> <p>Authentication token. Defaults to None.</p> <code>None</code> <code>xml_path</code> <code>Union[str, None]</code> <p>Path to the XML file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def __init__(\n    self,\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n) -&gt; None:\n    \"\"\"\n    Initialize the AristaXmlObject class.\n\n    Parameters\n    ----------\n    searched_version : str\n        The version of the software to search for.\n    image_type : str\n        The type of image to download.\n    token : Union[str, None], optional\n        Authentication token. Defaults to None.\n    xml_path : Union[str, None], optional\n        Path to the XML file. Defaults to None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.search_version = searched_version\n    self.image_type = image_type\n    super().__init__(token=token, xml_path=xml_path)\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlObject.filename","title":"filename  <code>property</code>","text":"<pre><code>filename: Union[str, None]\n</code></pre> <p>Helper to build filename to search on arista.com.</p> <p>Returns:</p> Type Description <code>Union[str, None]</code> <p>Filename to search for on Arista.com.</p>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlObject.urls","title":"urls  <code>property</code>","text":"<pre><code>urls: Dict[str, Union[str, None]]\n</code></pre> <p>Get URLs to download files from Arista server for given software and version.</p> <p>This method will return a dictionary with file type as key and URL as value. It returns URL for the following items: \u2018image\u2019, \u2018md5sum\u2019, and \u2018sha512sum\u2019.</p> <p>Returns:</p> Type Description <code>Dict[str, Union[str, None]]</code> <p>Dictionary with file type as key and URL as value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If filename or hash file is not found.</p>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlObject.hash_filename","title":"hash_filename","text":"<pre><code>hash_filename() -&gt; Union[str, None]\n</code></pre> <p>Helper to build filename for checksum to search on arista.com.</p> <p>Returns:</p> Type Description <code>Union[str, None]</code> <p>Filename to search for on Arista.com.</p> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def hash_filename(self) -&gt; Union[str, None]:\n    \"\"\"\n    Helper to build filename for checksum to search on arista.com.\n\n    Returns\n    -------\n    Union[str, None]\n        Filename to search for on Arista.com.\n    \"\"\"\n\n    logging.info(f\"Building hash filename for {self.software} package.\")\n\n    if self.filename is not None:\n        return f\"{self.filename}.{self.checksum_file_extension}\"\n    return None\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlObject.path_from_xml","title":"path_from_xml","text":"<pre><code>path_from_xml(search_file: str) -&gt; Union[str, None]\n</code></pre> <p>Parse XML to find path for a given file.</p> <p>Parameters:</p> Name Type Description Default <code>search_file</code> <code>str</code> <p>File to search for.</p> required <p>Returns:</p> Type Description <code>Union[str, None]</code> <p>Path from XML if found, None otherwise.</p> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def path_from_xml(self, search_file: str) -&gt; Union[str, None]:\n    \"\"\"\n    Parse XML to find path for a given file.\n\n    Parameters\n    ----------\n    search_file : str\n        File to search for.\n\n    Returns\n    -------\n    Union[str, None]\n        Path from XML if found, None otherwise.\n    \"\"\"\n\n    logging.info(f\"Building path from XML for {search_file}.\")\n\n    # Build xpath with provided file\n    xpath_query = self.base_xpath_filepath.format(search_file)\n    # Find the element using XPath\n    path_element = self.xml_data.find(xpath_query)\n\n    if path_element is not None:\n        logging.debug(f'found path: {path_element.get(\"path\")} for {search_file}')\n\n    # Return the path if found, otherwise return None\n    return path_element.get(\"path\") if path_element is not None else None\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlQuerier","title":"AristaXmlQuerier","text":"<pre><code>AristaXmlQuerier(\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n)\n</code></pre> <p>               Bases: <code>AristaXmlBase</code></p> <p>Class to query Arista XML data for Software versions.</p> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def __init__(\n    self, token: Union[str, None] = None, xml_path: Union[str, None] = None\n) -&gt; None:\n    \"\"\"\n    Initialize the AristaXmlBase class.\n\n    Parameters\n    ----------\n    token : Union[str, None], optional\n        Authentication token. Defaults to None.\n    xml_path : Union[str, None], optional\n        Path to the XML file. Defaults to None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    logging.info(\"Initializing AristXmlBase.\")\n    self.server = eos_downloader.logics.arista_server.AristaServer(token=token)\n    if xml_path is not None:\n        try:\n            self.xml_data = ET.parse(xml_path)\n        except ET.ParseError as error:\n            logging.error(f\"Error while parsing XML data: {error}\")\n    else:\n        if self.server.authenticate():\n            data = self._get_xml_root()\n            if data is None:\n                logging.error(\"Unable to get XML data from Arista server\")\n                raise ValueError(\"Unable to get XML data from Arista server\")\n            # Ensure the XML data has a valid root element\n            if data.getroot() is None:\n                logging.error(\"XML data has no root element\")\n                raise ValueError(\"XML data has no root element\")\n            # At this point, we've validated that data has a valid root\n            self.xml_data = data  # type: ignore[assignment]\n        else:\n            logging.error(\"Unable to authenticate to Arista server\")\n            raise ValueError(\"Unable to authenticate to Arista server\")\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlQuerier.available_public_versions","title":"available_public_versions","text":"<pre><code>available_public_versions(\n    branch: Union[str, None] = None,\n    rtype: Union[str, None] = None,\n    package: AristaPackage = \"eos\",\n) -&gt; List[AristaVersions]\n</code></pre> <p>Get list of available public EOS versions from Arista website.</p> <p>This method parses XML data to extract available EOS or CVP versions based on specified criteria.</p> <p>Parameters:</p> Name Type Description Default <code>branch</code> <code>Union[str, None]</code> <p>Branch number to filter versions (e.g. \u201c4.29\u201d). Defaults to None.</p> <code>None</code> <code>rtype</code> <code>Union[str, None]</code> <p>Release type to filter versions. Must be one of the valid release types defined in RTYPES. Defaults to None.</p> <code>None</code> <code>package</code> <code>AristaPackage</code> <p>Type of package to look for - either \u2018eos\u2019 or \u2018cvp\u2019. Defaults to \u2018eos\u2019.</p> <code>'eos'</code> <p>Returns:</p> Type Description <code>List[AristaVersions]</code> <p>List of version objects (EosVersion or CvpVersion) matching the criteria.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provided rtype is not in the list of valid release types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; server.available_public_eos_version(branch=\"4.29\", rtype=\"INT\", package=\"eos\")\n[EosVersion('4.29.0F-INT'), EosVersion('4.29.1F-INT'), ...]\n</code></pre> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def available_public_versions(\n    self,\n    branch: Union[str, None] = None,\n    rtype: Union[str, None] = None,\n    package: AristaPackage = \"eos\",\n) -&gt; List[AristaVersions]:\n    \"\"\"\n    Get list of available public EOS versions from Arista website.\n\n    This method parses XML data to extract available EOS or CVP versions based on specified criteria.\n\n    Parameters\n    ----------\n    branch : Union[str, None], optional\n        Branch number to filter versions (e.g. \"4.29\"). Defaults to None.\n    rtype : Union[str, None], optional\n        Release type to filter versions. Must be one of the valid release types defined in RTYPES. Defaults to None.\n    package : AristaPackage, optional\n        Type of package to look for - either 'eos' or 'cvp'. Defaults to 'eos'.\n\n    Returns\n    -------\n    List[AristaVersions]\n        List of version objects (EosVersion or CvpVersion) matching the criteria.\n\n    Raises\n    ------\n    ValueError\n        If provided rtype is not in the list of valid release types.\n\n    Examples\n    --------\n    &gt;&gt;&gt; server.available_public_eos_version(branch=\"4.29\", rtype=\"INT\", package=\"eos\")\n    [EosVersion('4.29.0F-INT'), EosVersion('4.29.1F-INT'), ...]\n    \"\"\"\n\n    logging.info(f\"Getting available versions for {package} package\")\n\n    xpath_query = './/dir[@label=\"Active Releases\"]//dir[@label]'\n    regexp = eos_downloader.models.version.EosVersion.regex_version\n\n    if package == \"cvp\":\n        xpath_query = './/dir[@label=\"Active Releases\"]//dir[@label]'\n        regexp = eos_downloader.models.version.CvpVersion.regex_version\n\n    package_versions = []\n\n    if rtype is not None and rtype not in eos_downloader.models.data.RTYPES:\n        raise ValueError(\n            f\"Invalid release type: {rtype}. Expected one of {eos_downloader.models.data.RTYPES}\"\n        )\n    nodes = self.xml_data.findall(xpath_query)\n    for node in nodes:\n        if \"label\" in node.attrib and node.get(\"label\") is not None:\n            label = node.get(\"label\")\n            if label is not None and regexp.match(label):\n                package_version = None\n                if package == \"eos\":\n                    package_version = (\n                        eos_downloader.models.version.EosVersion.from_str(label)\n                    )\n                elif package == \"cvp\":\n                    package_version = (\n                        eos_downloader.models.version.CvpVersion.from_str(label)\n                    )\n                package_versions.append(package_version)\n    if rtype is not None or branch is not None:\n        package_versions = [\n            version\n            for version in package_versions\n            if version is not None\n            and (rtype is None or version.rtype == rtype)\n            and (branch is None or str(version.branch) == branch)\n        ]\n\n    return package_versions\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlQuerier.branches","title":"branches","text":"<pre><code>branches(\n    package: AristaPackage = \"eos\", latest: bool = False\n) -&gt; List[str]\n</code></pre> <p>Returns a list of valid EOS version branches.</p> <p>The branches are determined based on the available public EOS versions. When latest=True, only the most recent branch is returned.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>AristaPackage</code> <p>Type of package to look for - either \u2018eos\u2019 or \u2018cvp\u2019. Defaults to \u2018eos\u2019.</p> <code>'eos'</code> <code>latest</code> <code>bool</code> <p>If True, returns only the latest branch version. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of branch version strings. Contains single latest version if latest=True, otherwise all available versions sorted descendingly.</p> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def branches(\n    self,\n    package: eos_downloader.models.types.AristaPackage = \"eos\",\n    latest: bool = False,\n) -&gt; List[str]:\n    \"\"\"\n    Returns a list of valid EOS version branches.\n\n    The branches are determined based on the available public EOS versions.\n    When latest=True, only the most recent branch is returned.\n\n    Parameters\n    ----------\n    package : eos_downloader.models.types.AristaPackage, optional\n        Type of package to look for - either 'eos' or 'cvp'. Defaults to 'eos'.\n    latest : bool, optional\n        If True, returns only the latest branch version. Defaults to False.\n\n    Returns\n    -------\n    List[str]\n        A list of branch version strings. Contains single latest version if latest=True,\n        otherwise all available versions sorted descendingly.\n    \"\"\"\n    if latest:\n        latest_branch = max(\n            self._get_branches(self.available_public_versions(package=package))\n        )\n        return [str(latest_branch)]\n    return sorted(\n        self._get_branches(self.available_public_versions(package=package)),\n        reverse=True,\n    )\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.AristaXmlQuerier.latest","title":"latest","text":"<pre><code>latest(\n    package: AristaPackage = \"eos\",\n    branch: Union[str, None] = None,\n    rtype: Union[ReleaseType, None] = None,\n) -&gt; AristaVersions\n</code></pre> <p>Get latest branch from semver standpoint.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>AristaPackage</code> <p>Type of package to look for - either \u2018eos\u2019 or \u2018cvp\u2019. Defaults to \u2018eos\u2019.</p> <code>'eos'</code> <code>branch</code> <code>Union[str, None]</code> <p>Branch to search for. Defaults to None.</p> <code>None</code> <code>rtype</code> <code>Union[ReleaseType, None]</code> <p>Release type to search for. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>AristaVersions</code> <p>Latest version found.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no versions are found to run the max() function.</p> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def latest(\n    self,\n    package: eos_downloader.models.types.AristaPackage = \"eos\",\n    branch: Union[str, None] = None,\n    rtype: Union[eos_downloader.models.types.ReleaseType, None] = None,\n) -&gt; AristaVersions:\n    \"\"\"\n    Get latest branch from semver standpoint.\n\n    Parameters\n    ----------\n    package : eos_downloader.models.types.AristaPackage, optional\n        Type of package to look for - either 'eos' or 'cvp'. Defaults to 'eos'.\n    branch : Union[str, None], optional\n        Branch to search for. Defaults to None.\n    rtype : Union[eos_downloader.models.types.ReleaseType, None], optional\n        Release type to search for. Defaults to None.\n\n    Returns\n    -------\n    AristaVersions\n        Latest version found.\n\n    Raises\n    ------\n    ValueError\n        If no versions are found to run the max() function.\n    \"\"\"\n    if package == \"eos\":\n        if rtype is not None and rtype not in eos_downloader.models.data.RTYPES:\n            raise ValueError(\n                f\"Invalid release type: {rtype}. Expected {eos_downloader.models.data.RTYPES}\"\n            )\n\n    versions = self.available_public_versions(\n        package=package, branch=branch, rtype=rtype\n    )\n    if len(versions) == 0:\n        raise ValueError(\"No versions found to run the max() function\")\n    return max(versions)\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.CvpXmlObject","title":"CvpXmlObject","text":"<pre><code>CvpXmlObject(\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n)\n</code></pre> <p>               Bases: <code>AristaXmlObject</code></p> <p>Class to query Arista XML data for CVP versions.</p> <p>Parameters:</p> Name Type Description Default <code>searched_version</code> <code>str</code> <p>The version of the software to search for.</p> required <code>image_type</code> <code>str</code> <p>The type of image to download.</p> required <code>token</code> <code>Union[str, None]</code> <p>The authentication token. Defaults to None.</p> <code>None</code> <code>xml_path</code> <code>Union[str, None]</code> <p>The path to the XML file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def __init__(\n    self,\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n) -&gt; None:\n    \"\"\"\n    Initialize an instance of the CvpXmlObject class.\n\n    Parameters\n    ----------\n    searched_version : str\n        The version of the software to search for.\n    image_type : str\n        The type of image to download.\n    token : Union[str, None], optional\n        The authentication token. Defaults to None.\n    xml_path : Union[str, None], optional\n        The path to the XML file. Defaults to None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    self.search_version = searched_version\n    self.image_type = image_type\n    self.version = eos_downloader.models.version.CvpVersion().from_str(\n        searched_version\n    )\n\n    super().__init__(\n        searched_version=searched_version,\n        image_type=image_type,\n        token=token,\n        xml_path=xml_path,\n    )\n</code></pre>"},{"location":"api/logics/arista_xml_server/#eos_downloader.logics.arista_xml_server.EosXmlObject","title":"EosXmlObject","text":"<pre><code>EosXmlObject(\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n)\n</code></pre> <p>               Bases: <code>AristaXmlObject</code></p> <p>Class to query Arista XML data for EOS versions.</p> <p>Parameters:</p> Name Type Description Default <code>searched_version</code> <code>str</code> <p>The version of the software to search for.</p> required <code>image_type</code> <code>str</code> <p>The type of image to download.</p> required <code>token</code> <code>Union[str, None]</code> <p>The authentication token. Defaults to None.</p> <code>None</code> <code>xml_path</code> <code>Union[str, None]</code> <p>The path to the XML file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/arista_xml_server.py</code> <pre><code>def __init__(\n    self,\n    searched_version: str,\n    image_type: str,\n    token: Union[str, None] = None,\n    xml_path: Union[str, None] = None,\n) -&gt; None:\n    \"\"\"\n    Initialize an instance of the EosXmlObject class.\n\n    Parameters\n    ----------\n    searched_version : str\n        The version of the software to search for.\n    image_type : str\n        The type of image to download.\n    token : Union[str, None], optional\n        The authentication token. Defaults to None.\n    xml_path : Union[str, None], optional\n        The path to the XML file. Defaults to None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    self.search_version = searched_version\n    self.image_type = image_type\n    self.version = eos_downloader.models.version.EosVersion().from_str(\n        searched_version\n    )\n\n    super().__init__(\n        searched_version=searched_version,\n        image_type=image_type,\n        token=token,\n        xml_path=xml_path,\n    )\n</code></pre>"},{"location":"api/logics/download/","title":"Download Management","text":""},{"location":"api/logics/download/#eos_downloader.logics.download","title":"download","text":"<p>ObjectDownloader class to manage file downloads with an option to use rich interface.</p> <p>This class provides methods to download files from URLs with progress tracking using either tqdm or rich interface. It supports both raw downloads and enhanced visual feedback during the download process.</p> <p>Functions:</p> Name Description <code>download_file</code> <p>Downloads a file from the given URL to the specified path with optional rich interface.</p> <code>_download_file_raw</code> <p>Static method that performs the actual file download with tqdm progress bar.</p> <p>Attributes:</p> Name Type Description <code>None</code> Example <pre><code>&gt;&gt;&gt; downloader = ObjectDownloader()\n&gt;&gt;&gt; result = downloader.download_file(\n...     url='http://example.com/file.zip',\n...     file_path='/downloads',\n...     filename='file.zip',\n...     rich_interface=True\n... )\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager","title":"SoftManager","text":"<pre><code>SoftManager(\n    dry_run: bool = False, force_download: bool = False\n)\n</code></pre> <p>SoftManager helps to download files from a remote location.</p> <p>This class provides methods to download files using either a simple progress bar or a rich interface with enhanced visual feedback.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; downloader = SoftManager()\n&gt;&gt;&gt; downloader.download_file(\n...     url=\"http://example.com/file.txt\",\n...     file_path=\"/tmp\",\n...     filename=\"file.txt\"\n... )\n'/tmp/file.txt'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dry_run</code> <code>bool</code> <p>If True, simulate operations without executing them, by default False</p> <code>False</code> <code>force_download</code> <code>bool</code> <p>If True, bypass cache and force download/import, by default False</p> <code>False</code> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def __init__(self, dry_run: bool = False, force_download: bool = False) -&gt; None:\n    \"\"\"\n    Initialize SoftManager.\n\n    Parameters\n    ----------\n    dry_run : bool, optional\n        If True, simulate operations without executing them, by default False\n    force_download : bool, optional\n        If True, bypass cache and force download/import, by default False\n    \"\"\"\n    self.file: Dict[str, Union[str, None]] = {}\n    self.file[\"name\"] = None\n    self.file[\"md5sum\"] = None\n    self.file[\"sha512sum\"] = None\n    self.dry_run = dry_run\n    self.force_download = force_download\n    logging.info(\n        \"SoftManager initialized%s%s\",\n        \" in dry-run mode\" if dry_run else \"\",\n        \" with force download\" if force_download else \"\",\n    )\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager.checksum","title":"checksum","text":"<pre><code>checksum(\n    check_type: Literal[\"md5sum\", \"sha512sum\", \"md5\"],\n) -&gt; bool\n</code></pre> <p>Verifies the integrity of a downloaded file using a specified checksum algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>check_type</code> <code>Literal['md5sum', 'sha512sum', 'md5']</code> <p>The type of checksum to perform. Currently supports \u2018md5sum\u2019 or \u2018sha512sum\u2019.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the checksum verification passes.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the calculated checksum does not match the expected checksum.</p> <code>FileNotFoundError</code> <p>If either the checksum file or the target file cannot be found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; client.checksum('sha512sum')  # Returns True if checksum matches\n</code></pre> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def checksum(self, check_type: Literal[\"md5sum\", \"sha512sum\", \"md5\"]) -&gt; bool:\n    \"\"\"\n    Verifies the integrity of a downloaded file using a specified checksum algorithm.\n\n    Parameters\n    ----------\n    check_type : Literal['md5sum', 'sha512sum', 'md5']\n        The type of checksum to perform. Currently supports 'md5sum' or 'sha512sum'.\n\n    Returns\n    -------\n    bool\n        True if the checksum verification passes.\n\n    Raises\n    ------\n    ValueError\n        If the calculated checksum does not match the expected checksum.\n    FileNotFoundError\n        If either the checksum file or the target file cannot be found.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client.checksum('sha512sum')  # Returns True if checksum matches\n    \"\"\"\n    logging.info(f\"Checking checksum for {self.file['name']} using {check_type}\")\n\n    if self.dry_run:\n        logging.debug(\"Dry-run mode enabled, skipping checksum verification\")\n        return True\n\n    if check_type == \"sha512sum\":\n        hash_sha512 = hashlib.sha512()\n        hash512sum = self.file[\"sha512sum\"]\n        file_name = self.file[\"name\"]\n\n        logging.debug(f\"checksum sha512sum file is: {hash512sum}\")\n\n        if file_name is None or hash512sum is None:\n            logging.error(\"File or checksum not found\")\n            raise ValueError(\"File or checksum not found\")\n\n        with open(hash512sum, \"r\", encoding=\"utf-8\") as f:\n            hash_expected = f.read().split()[0]\n        with open(file_name, \"rb\") as f:\n            while True:\n                chunk = f.read(4096)\n                if not chunk:\n                    break\n                hash_sha512.update(chunk)\n        if hash_sha512.hexdigest() != hash_expected:\n            logging.error(\n                f\"Checksum failed for {self.file['name']}: computed {hash_sha512.hexdigest()} - expected {hash_expected}\"\n            )\n            raise ValueError(\"Incorrect checksum\")\n        return True\n\n    if check_type in [\"md5sum\", \"md5\"]:\n        md5sum_file = self.file[\"md5sum\"]\n        file_name = self.file[\"name\"]\n\n        if md5sum_file is None:\n            raise ValueError(f\"md5sum is not found: {md5sum_file}\")\n\n        with open(md5sum_file, \"r\", encoding=\"utf-8\") as f:\n            hash_expected = f.read().split()[0]\n\n        if hash_expected is None:\n            raise ValueError(\"MD5Sum is empty, cannot compute file.\")\n\n        if file_name is None:\n            raise ValueError(\"Filename is None. Please fix it\")\n\n        if not self._compute_hash_md5sum(file_name, hash_expected=hash_expected):\n            logging.error(\n                f\"Checksum failed for {self.file['name']}: expected {hash_expected}\"\n            )\n\n            raise ValueError(\"Incorrect checksum\")\n\n        return True\n\n    logging.error(f\"Checksum type {check_type} not yet supported\")\n    raise ValueError(f\"Checksum type {check_type} not yet supported\")\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager.download_file","title":"download_file","text":"<pre><code>download_file(\n    url: str,\n    file_path: str,\n    filename: str,\n    *,\n    rich_interface: bool = True,\n    force: bool = False\n) -&gt; Union[None, str]\n</code></pre> <p>Downloads a file from a URL with caching support.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL from which to download the file.</p> required <code>file_path</code> <code>str</code> <p>The directory path where the file should be saved.</p> required <code>filename</code> <code>str</code> <p>The name to be given to the downloaded file.</p> required <code>rich_interface</code> <code>bool</code> <p>Whether to use rich progress bar interface. Defaults to True.</p> <code>True</code> <code>force</code> <code>bool</code> <p>If True, download even if file exists locally. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[None, str]</code> <p>Path to the downloaded or cached file, or None on error.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; manager = SoftManager()\n&gt;&gt;&gt; manager.download_file(\n...     url=\"https://example.com/file.swi\",\n...     file_path=\"/downloads\",\n...     filename=\"EOS-4.29.3M.swi\"\n... )\n'/downloads/EOS-4.29.3M.swi'\n</code></pre> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def download_file(\n    self,\n    url: str,\n    file_path: str,\n    filename: str,\n    *,\n    rich_interface: bool = True,\n    force: bool = False,\n) -&gt; Union[None, str]:\n    \"\"\"\n    Downloads a file from a URL with caching support.\n\n    Parameters\n    ----------\n    url : str\n        The URL from which to download the file.\n    file_path : str\n        The directory path where the file should be saved.\n    filename : str\n        The name to be given to the downloaded file.\n    rich_interface : bool, optional\n        Whether to use rich progress bar interface. Defaults to True.\n    force : bool, optional\n        If True, download even if file exists locally. Defaults to False.\n\n    Returns\n    -------\n    Union[None, str]\n        Path to the downloaded or cached file, or None on error.\n\n    Examples\n    --------\n    &gt;&gt;&gt; manager = SoftManager()\n    &gt;&gt;&gt; manager.download_file(\n    ...     url=\"https://example.com/file.swi\",\n    ...     file_path=\"/downloads\",\n    ...     filename=\"EOS-4.29.3M.swi\"\n    ... )\n    '/downloads/EOS-4.29.3M.swi'\n    \"\"\"\n    full_path = Path(file_path) / filename\n\n    # Check cache unless force flag is set\n    if not force and not self.force_download:\n        if full_path.exists():\n            logging.info(f\"Using cached file: {full_path}\")\n            return str(full_path)\n\n    # Log download action\n    logging.info(\n        f\"{'[DRY-RUN] Would download' if self.dry_run else 'Downloading'} {filename} from {url}\"\n    )\n\n    # Handle dry-run mode\n    if self.dry_run:\n        return os.path.join(file_path, filename)\n\n    # Proceed with download\n    if url is not False:\n        if not rich_interface:\n            return self._download_file_raw(\n                url=url, file_path=os.path.join(file_path, filename)\n            )\n        rich_downloader = eos_downloader.helpers.DownloadProgressBar()\n        rich_downloader.download(urls=[url], dest_dir=file_path)\n        return os.path.join(file_path, filename)\n\n    logging.error(f\"Cannot download file {file_path}\")\n    return None\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager.downloads","title":"downloads","text":"<pre><code>downloads(\n    object_arista: AristaXmlObjects,\n    file_path: str,\n    rich_interface: bool = True,\n) -&gt; tuple[str, bool]\n</code></pre> <p>Downloads files from Arista EOS server with caching support.</p> <p>Downloads the EOS image and optional md5/sha512 files based on the provided EOS XML object. Each file is downloaded to the specified path with appropriate filenames. Uses cache to skip already downloaded files unless force_download is enabled.</p> <p>Parameters:</p> Name Type Description Default <code>object_arista</code> <code>AristaXmlObjects</code> <p>Object containing EOS image and hash file URLs.</p> required <code>file_path</code> <code>str</code> <p>Directory path where files should be downloaded.</p> required <code>rich_interface</code> <code>bool</code> <p>Whether to use rich console output. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[str, bool]</code> <p>A tuple containing: - The file path where files were downloaded/cached - Boolean indicating if files were retrieved from cache (True) or downloaded (False)</p> <p>Examples:</p> <p>Download new files or use cache:</p> <pre><code>&gt;&gt;&gt; client = SoftManager()\n&gt;&gt;&gt; path, cached = client.downloads(eos_obj, \"/tmp/downloads\")\n&gt;&gt;&gt; if cached:\n...     print(\"Files retrieved from cache\")\n</code></pre> <p>Force re-download even if cached:</p> <pre><code>&gt;&gt;&gt; client = SoftManager(force_download=True)\n&gt;&gt;&gt; path, cached = client.downloads(eos_obj, \"/tmp/downloads\")\n&gt;&gt;&gt; cached  # Will be False\nFalse\n</code></pre> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def downloads(\n    self,\n    object_arista: eos_downloader.logics.arista_xml_server.AristaXmlObjects,\n    file_path: str,\n    rich_interface: bool = True,\n) -&gt; tuple[str, bool]:\n    \"\"\"\n    Downloads files from Arista EOS server with caching support.\n\n    Downloads the EOS image and optional md5/sha512 files based on the\n    provided EOS XML object. Each file is downloaded to the specified path\n    with appropriate filenames. Uses cache to skip already downloaded files\n    unless force_download is enabled.\n\n    Parameters\n    ----------\n    object_arista : eos_downloader.logics.arista_xml_server.AristaXmlObjects\n        Object containing EOS image and hash file URLs.\n    file_path : str\n        Directory path where files should be downloaded.\n    rich_interface : bool, optional\n        Whether to use rich console output. Defaults to True.\n\n    Returns\n    -------\n    tuple[str, bool]\n        A tuple containing:\n        - The file path where files were downloaded/cached\n        - Boolean indicating if files were retrieved from cache (True) or downloaded (False)\n\n    Examples\n    --------\n    Download new files or use cache:\n\n    &gt;&gt;&gt; client = SoftManager()\n    &gt;&gt;&gt; path, cached = client.downloads(eos_obj, \"/tmp/downloads\")\n    &gt;&gt;&gt; if cached:\n    ...     print(\"Files retrieved from cache\")\n\n    Force re-download even if cached:\n\n    &gt;&gt;&gt; client = SoftManager(force_download=True)\n    &gt;&gt;&gt; path, cached = client.downloads(eos_obj, \"/tmp/downloads\")\n    &gt;&gt;&gt; cached  # Will be False\n    False\n    \"\"\"\n    logging.info(\n        f\"Processing files for {object_arista.version} \"\n        f\"(force_download={self.force_download})\"\n    )\n\n    if len(object_arista.urls) == 0:\n        logging.error(\n            f\"No URLs found for download of version {object_arista.version}. \"\n            f\"The requested version or image type may not exist on Arista servers.\"\n        )\n        raise ValueError(\n            f\"Filename not found for version {object_arista.version}. \"\n            f\"Please verify that this version exists and is available for your account.\"\n        )\n\n    # Track if all files were retrieved from cache\n    all_files_cached = True\n\n    for file_type, url in sorted(object_arista.urls.items(), reverse=True):\n        logging.debug(f\"Processing {file_type} from {url}\")\n        if file_type == \"image\":\n            filename = object_arista.filename\n            self.file[\"name\"] = filename\n        else:\n            filename = object_arista.hash_filename()\n            self.file[file_type] = filename\n        if url is None:\n            logging.error(f\"URL not found for {file_type}\")\n            raise ValueError(f\"URL not found for {file_type}\")\n        if filename is None:\n            logging.error(f\"Filename not found for {file_type}\")\n            raise ValueError(f\"Filename not found for {file_type}\")\n        if not self.dry_run:\n            # Check if file is already cached before download\n            full_path = Path(file_path) / filename\n            file_was_cached = full_path.exists() and not self.force_download\n\n            # download_file will check cache automatically\n            # unless self.force_download is True\n            self.download_file(\n                url,\n                file_path,\n                filename,\n                rich_interface=rich_interface,\n                force=self.force_download,\n            )\n\n            # Update cache tracking\n            if not file_was_cached:\n                all_files_cached = False\n        else:\n            full_path = Path(file_path) / filename\n            if full_path.exists() and not self.force_download:\n                logging.info(f\"[DRY-RUN] Would use cached file: {filename}\")\n            else:\n                logging.info(\n                    f\"[DRY-RUN] Would download file {filename} \"\n                    f\"for version {object_arista.version}\"\n                )\n                all_files_cached = False\n\n    return file_path, all_files_cached\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager.import_docker","title":"import_docker","text":"<pre><code>import_docker(\n    local_file_path: str,\n    docker_name: str = \"arista/ceos\",\n    docker_tag: str = \"latest\",\n    force: bool = False,\n) -&gt; bool\n</code></pre> <p>Import local file into Docker with caching support.</p> <p>Parameters:</p> Name Type Description Default <code>local_file_path</code> <code>str</code> <p>Path to the local file to import</p> required <code>docker_name</code> <code>str</code> <p>Docker image name, by default \u201carista/ceos\u201d</p> <code>'arista/ceos'</code> <code>docker_tag</code> <code>str</code> <p>Docker image tag, by default \u201clatest\u201d</p> <code>'latest'</code> <code>force</code> <code>bool</code> <p>If True, import even if image:tag already exists. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if image was retrieved from cache (already exists), False if image was imported</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the local file does not exist</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; manager = SoftManager()\n&gt;&gt;&gt; was_cached = manager.import_docker(\n...     local_file_path=\"/downloads/cEOS-4.29.3M.tar.xz\",\n...     docker_name=\"arista/ceos\",\n...     docker_tag=\"4.29.3M\"\n... )\n&gt;&gt;&gt; if was_cached:\n...     print(\"Image already in cache\")\n</code></pre> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def import_docker(\n    self,\n    local_file_path: str,\n    docker_name: str = \"arista/ceos\",\n    docker_tag: str = \"latest\",\n    force: bool = False,\n) -&gt; bool:\n    \"\"\"\n    Import local file into Docker with caching support.\n\n    Parameters\n    ----------\n    local_file_path : str\n        Path to the local file to import\n    docker_name : str, optional\n        Docker image name, by default \"arista/ceos\"\n    docker_tag : str, optional\n        Docker image tag, by default \"latest\"\n    force : bool, optional\n        If True, import even if image:tag already exists.\n        Defaults to False.\n\n    Returns\n    -------\n    bool\n        True if image was retrieved from cache (already exists),\n        False if image was imported\n\n    Raises\n    ------\n    FileNotFoundError\n        If the local file does not exist\n\n    Examples\n    --------\n    &gt;&gt;&gt; manager = SoftManager()\n    &gt;&gt;&gt; was_cached = manager.import_docker(\n    ...     local_file_path=\"/downloads/cEOS-4.29.3M.tar.xz\",\n    ...     docker_name=\"arista/ceos\",\n    ...     docker_tag=\"4.29.3M\"\n    ... )\n    &gt;&gt;&gt; if was_cached:\n    ...     print(\"Image already in cache\")\n    \"\"\"\n    # Check if file exists\n    if not os.path.exists(local_file_path):\n        raise FileNotFoundError(f\"File {local_file_path} not found\")\n\n    # Check cache unless force flag is set\n    if not force and not self.force_download:\n        if self._docker_image_exists(docker_name, docker_tag):\n            logging.info(\n                f\"Docker image {docker_name}:{docker_tag} already \"  # noqa: E231\n                f\"exists locally. Use --force to re-import.\"\n            )\n            return True\n\n    # Log import action\n    logging.info(\n        f\"{'[DRY-RUN] Would import' if self.dry_run else 'Importing'} \"\n        f\"{docker_name}:{docker_tag}\"  # noqa: E231\n    )\n\n    # Handle dry-run mode\n    if self.dry_run:\n        return False\n\n    # Check if docker is available\n    if not shutil.which(\"docker\"):\n        raise FileNotFoundError(\"Docker binary not found in PATH\")\n\n    # Proceed with import\n    try:\n        cmd = (\n            f\"$(which docker) import {local_file_path} \"\n            f\"{docker_name}:{docker_tag}\"  # noqa: E231\n        )\n        logging.debug(f\"Executing: {cmd}\")\n        os.system(cmd)\n        logging.info(\n            f\"Docker image {docker_name}:{docker_tag} \"  # noqa: E231\n            f\"imported successfully\"\n        )\n        return False  # Image was imported (not from cache)\n    except Exception as e:\n        logging.error(f\"Error importing docker image: {e}\")\n        raise e\n</code></pre>"},{"location":"api/logics/download/#eos_downloader.logics.download.SoftManager.provision_eve","title":"provision_eve","text":"<pre><code>provision_eve(\n    object_arista: EosXmlObject, noztp: bool = False\n) -&gt; None\n</code></pre> <p>Provisions EVE-NG with the specified Arista EOS object.</p> <p>Parameters:</p> Name Type Description Default <code>object_arista</code> <code>EosXmlObject</code> <p>The Arista EOS object containing version, filename, and URLs.</p> required <code>noztp</code> <code>bool</code> <p>If True, disables ZTP (Zero Touch Provisioning). Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no URLs are found for download or if a URL or filename is None.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>eos_downloader/logics/download.py</code> <pre><code>def provision_eve(\n    self,\n    object_arista: eos_downloader.logics.arista_xml_server.EosXmlObject,\n    noztp: bool = False,\n) -&gt; None:\n    \"\"\"\n    Provisions EVE-NG with the specified Arista EOS object.\n\n    Parameters\n    ----------\n    object_arista : eos_downloader.logics.arista_xml_server.EosXmlObject\n        The Arista EOS object containing version, filename, and URLs.\n    noztp : bool, optional\n        If True, disables ZTP (Zero Touch Provisioning). Defaults to False.\n\n    Raises\n    ------\n    ValueError\n        If no URLs are found for download or if a URL or filename is None.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    # EVE-NG provisioning page for vEOS\n    # https://www.eve-ng.net/index.php/documentation/howtos/howto-add-arista-veos/\n\n    logging.info(\n        f\"Provisioning EVE-NG with {object_arista.version} / {object_arista.filename}\"\n    )\n\n    file_path = f\"{eos_downloader.defaults.EVE_QEMU_FOLDER_PATH}/veos-{object_arista.version}\"\n\n    filename: Union[str, None] = None\n    eos_filename = object_arista.filename\n\n    if len(object_arista.urls) == 0:\n        logging.error(\n            f\"No URLs found for download of version {object_arista.version}. \"\n            f\"The requested version or image type may not exist on Arista servers.\"\n        )\n        raise ValueError(\n            f\"Filename not found for version {object_arista.version}. \"\n            f\"Please verify that this version exists and is available for your account.\"\n        )\n\n    for file_type, url in sorted(object_arista.urls.items(), reverse=True):\n        logging.debug(f\"Downloading {file_type} from {url}\")\n        if file_type == \"image\":\n            fname = object_arista.filename\n            if fname is not None:\n                filename = fname\n                if noztp:\n                    filename = f\"{os.path.splitext(fname)[0]}-noztp{os.path.splitext(fname)[1]}\"\n                eos_filename = filename\n                logging.debug(f\"filename is {filename}\")\n                self.file[\"name\"] = filename\n        else:\n            filename = object_arista.hash_filename()\n            if filename is not None:\n                self.file[file_type] = filename\n        if url is None:\n            logging.error(f\"URL not found for {file_type}\")\n            raise ValueError(f\"URL not found for {file_type}\")\n        if filename is None:\n            logging.error(f\"Filename not found for {file_type}\")\n            raise ValueError(f\"Filename not found for {file_type}\")\n\n        if not os.path.exists(file_path):\n            logging.warning(f\"creating folder on eve-ng server: {file_path}\")\n            self._create_destination_folder(path=file_path)\n\n        logging.debug(\n            f\"downloading file {filename} for version {object_arista.version}\"\n        )\n        self.download_file(url, file_path, filename, rich_interface=True)\n\n    # Convert to QCOW2 format\n    file_qcow2 = os.path.join(file_path, \"hda.qcow2\")\n\n    if not self.dry_run:\n        os.system(\n            f\"$(which qemu-img) convert -f vmdk -O qcow2 {file_path}/{eos_filename} {file_path}/{file_qcow2}\"\n        )\n    else:\n        logging.info(\n            f\"{'[DRY-RUN] Would convert' if self.dry_run else 'Converting'} VMDK to QCOW2 format: {file_path}/{eos_filename} to {file_qcow2} \"\n        )\n\n    logging.info(\"Applying unl_wrapper to fix permissions\")\n    if not self.dry_run:\n        os.system(\"/opt/unetlab/wrappers/unl_wrapper -a fixpermissions\")\n    else:\n        logging.info(\"[DRY-RUN] Would execute unl_wrapper to fix permissions\")\n</code></pre>"},{"location":"api/models/custom_types/","title":"Custom Types","text":""},{"location":"api/models/custom_types/#eos_downloader.models.types","title":"types","text":"<p>This module defines type aliases and literals used in the eos_downloader project.</p> <p>Attributes:</p> Name Type Description <code>AristaPackage</code> <code>Literal</code> <p>Literal type for Arista package types. Can be either \u201ceos\u201d or \u201ccvp\u201d.</p> <code>AristaMapping</code> <code>Literal</code> <p>Literal type for Arista mapping types. Can be either \u201cCloudVision\u201d or \u201cEOS\u201d.</p> <code>AristaVersions</code> <code>Union</code> <p>Union type for supported SemVer object types. Can be either EosVersion or CvpVersion.</p> <code>ReleaseType</code> <code>Literal</code> <p>Literal type for release types. Can be either \u201cM\u201d (maintenance) or \u201cF\u201d (feature).</p> <p>Examples:</p> <pre><code># Example usage of AristaPackage\ndef get_package_type(package: AristaPackage):\n    if package == \"eos\":\n        return \"Arista EOS package\"\n    elif package == \"cvp\":\n        return \"CloudVision Portal package\"\n\n# Example usage of AristaVersions\ndef print_version(version: AristaVersions):\n    print(f\"Version: {version}\")\n\n# Example usage of ReleaseType\ndef is_feature_release(release: ReleaseType) -&gt; bool:\n    return release == \"F\"\n</code></pre>"},{"location":"api/models/data/","title":"Data","text":""},{"location":"api/models/data/#eos_downloader.models.data.software_mapping","title":"software_mapping  <code>module-attribute</code>","text":"<pre><code>software_mapping = DataMapping(\n    CloudVision={\n        \"ova\": {\"extension\": \".ova\", \"prepend\": \"cvp\"},\n        \"rpm\": {\n            \"extension\": \"\",\n            \"prepend\": \"cvp-rpm-installer\",\n        },\n        \"kvm\": {\"extension\": \"-kvm.tgz\", \"prepend\": \"cvp\"},\n        \"atswi\": {\"extension\": \".atswi\", \"prepend\": \"cvp\"},\n        \"upgrade\": {\n            \"extension\": \".tgz\",\n            \"prepend\": \"cvp-upgrade\",\n        },\n    },\n    EOS={\n        \"64\": {\"extension\": \".swi\", \"prepend\": \"EOS64\"},\n        \"INT\": {\"extension\": \"-INT.swi\", \"prepend\": \"EOS\"},\n        \"2GB-INT\": {\n            \"extension\": \"-INT.swi\",\n            \"prepend\": \"EOS-2GB\",\n        },\n        \"cEOS\": {\n            \"extension\": \".tar.xz\",\n            \"prepend\": \"cEOS-lab\",\n        },\n        \"cEOS64\": {\n            \"extension\": \".tar.xz\",\n            \"prepend\": \"cEOS64-lab\",\n        },\n        \"cEOSarm\": {\n            \"extension\": \".tar.xz\",\n            \"prepend\": \"cEOSarm-lab\",\n        },\n        \"vEOS\": {\"extension\": \".vmdk\", \"prepend\": \"vEOS\"},\n        \"vEOS-lab\": {\n            \"extension\": \".vmdk\",\n            \"prepend\": \"vEOS-lab\",\n        },\n        \"EOS-2GB\": {\n            \"extension\": \".swi\",\n            \"prepend\": \"EOS-2GB\",\n        },\n        \"RN\": {\"extension\": \"-\", \"prepend\": \"RN\"},\n        \"SOURCE\": {\n            \"extension\": \"-source.tar\",\n            \"prepend\": \"EOS\",\n        },\n        \"default\": {\"extension\": \".swi\", \"prepend\": \"EOS\"},\n    },\n)\n</code></pre>"},{"location":"api/models/data/#eos_downloader.models.data","title":"data","text":"<p>This module defines data models and mappings for image types of CloudVision and EOS on Arista.com.</p> <p>Classes:</p> Name Description <code>ImageInfo:</code> <p>A Pydantic model representing image information for a specific image type.</p> <code>DataMapping:</code> <p>A Pydantic model representing data mapping for image types of CloudVision and EOS on Arista.com.</p> <p>Functions:</p> Name Description <code>DataMapping.filename</code> <p>Generates a filename based on the provided software, image type, and version.</p> Constants <ul> <li>RTYPE_FEATURE (ReleaseType): Represents a feature release type.</li> <li>RTYPE_MAINTENANCE (ReleaseType): Represents a maintenance release type.</li> <li>RTYPES (List[ReleaseType]): A list containing the feature and maintenance release types.</li> </ul> Variables <ul> <li>software_mapping (DataMapping): An instance of DataMapping containing the mappings for CloudVision and EOS image types.</li> </ul>"},{"location":"api/models/data/#eos_downloader.models.data.DataMapping","title":"DataMapping","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data mapping for image types of CloudVision and EOS on Arista.com.</p> <p>Attributes:</p> Name Type Description <code>CloudVision</code> <code>Dict[str, ImageInfo]</code> <p>Mapping of image types to their information for CloudVision.</p> <code>EOS</code> <code>Dict[str, ImageInfo]</code> <p>Mapping of image types to their information for EOS.</p> <p>Methods:</p> Name Description <code>filename</code> <p>Generates a filename based on the provided software, image type, and version.</p>"},{"location":"api/models/data/#eos_downloader.models.data.DataMapping.filename","title":"filename","text":"<pre><code>filename(\n    software: AristaMapping, image_type: str, version: str\n) -&gt; str\n</code></pre> <p>Generates a filename based on the provided software, image type, and version.</p> <p>Parameters:</p> Name Type Description Default <code>software</code> <code>AristaMapping</code> <p>The name of the software for which the filename is being generated.</p> required <code>image_type</code> <code>str</code> <p>The type of image for which the filename is being generated.</p> required <code>version</code> <code>str</code> <p>The version of the software or image.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The generated filename.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the software does not have a corresponding mapping.</p> <code>ValueError</code> <p>If no configuration is found for the given image type and no default configuration is available.</p> Source code in <code>eos_downloader/models/data.py</code> <pre><code>def filename(self, software: AristaMapping, image_type: str, version: str) -&gt; str:\n    \"\"\"Generates a filename based on the provided software, image type, and version.\n\n    Parameters\n    ----------\n    software : AristaMapping\n        The name of the software for which the filename is being generated.\n    image_type : str\n        The type of image for which the filename is being generated.\n    version : str\n        The version of the software or image.\n\n    Returns\n    -------\n    str\n        The generated filename.\n\n    Raises\n    ------\n    ValueError\n        If the software does not have a corresponding mapping.\n    ValueError\n        If no configuration is found for the given image type and no default configuration is available.\n    \"\"\"\n\n    if hasattr(self, software):\n        soft_mapping = getattr(self, software)\n        image_config = soft_mapping.get(image_type, None)\n        if image_config is None:\n            image_config = getattr(soft_mapping, \"default\", None)\n            if image_config is None:\n                raise ValueError(\n                    f\"No default configuration found for image type {image_type}\"\n                )\n        if image_config is not None:\n            return f\"{image_config.prepend}-{version}{image_config.extension}\"\n        raise ValueError(f\"No configuration found for image type {image_type}\")\n    raise ValueError(f\"Incorrect value for software {software}\")\n</code></pre>"},{"location":"api/models/data/#eos_downloader.models.data.ImageInfo","title":"ImageInfo","text":"<p>               Bases: <code>BaseModel</code></p> <p>Image information for a specific image type.</p> <p>Attributes:</p> Name Type Description <code>extension</code> <code>str</code> <p>The file extension for the image type.</p> <code>prepend</code> <code>str</code> <p>The prefix to prepend to the filename.</p>"},{"location":"api/models/version/","title":"Version","text":""},{"location":"api/models/version/#eos_downloader.models.version","title":"version","text":"<p>The module implements version management following semantic versioning principles with custom adaptations for Arista EOS and CloudVision Portal (CVP) software versioning schemes.</p> <p>Classes:</p> Name Description <code>SemVer:</code> <p>Base class implementing semantic versioning with comparison and matching capabilities.</p> <code>EosVersion:</code> <p>Specialized version handling for Arista EOS software releases.</p> <code>CvpVersion:</code> <p>Specialized version handling for CloudVision Portal releases.</p> <p>Attributes:</p> Name Type Description <code>major</code> <code>int</code> <p>Major version number.</p> <code>minor</code> <code>int</code> <p>Minor version number.</p> <code>patch</code> <code>int</code> <p>Patch version number.</p> <code>rtype</code> <code>Optional[str]</code> <p>Release type (e.g., \u2018M\u2019 for maintenance, \u2018F\u2019 for feature).</p> <code>other</code> <code>Any</code> <p>Additional version information.</p> <code>regex_version</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract version information.</p> <code>regex_branch</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract branch information.</p> <code>description</code> <code>str</code> <p>A basic description of this class.</p> <p>Examples:</p> <pre><code># Basic SemVer usage:\n&gt;&gt;&gt; version = SemVer(major=4, minor=23, patch=3)\n'4.23.3'\n\n# EOS version handling:\n&gt;&gt;&gt; eos = EosVersion.from_str('4.23.3M')\n&gt;&gt;&gt; eos.branch\n'4.23'\n\n# CVP version handling:\n&gt;&gt;&gt; cvp = CvpVersion.from_str('2024.1.0')\n&gt;&gt;&gt; str(cvp)\n</code></pre> <p>The module enforces version format validation through regular expressions and provides comprehensive comparison operations (==, !=, &lt;, &lt;=, &gt;, &gt;=) between versions.</p> Note: <ul> <li>EOS versions follow the format: ..[M|F]</li> <li>CVP versions follow the format: ..</li> </ul>"},{"location":"api/models/version/#eos_downloader.models.version.CvpVersion","title":"CvpVersion","text":"<p>               Bases: <code>SemVer</code></p> <p>A CloudVision Portal Version class that inherits from SemVer.</p> <p>This class implements version management for CloudVision Portal (CVP) versions following a modified semantic versioning pattern where: - major version represents the year (e.g. 2024) - minor version represents feature releases - patch version represents bug fixes</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; version = CvpVersion(2024, 1, 0)\n&gt;&gt;&gt; str(version)\n'2024.1.0'\n</code></pre> <p>Attributes:</p> Name Type Description <code>major</code> <code>int</code> <p>The year component of the version (e.g. 2024).</p> <code>minor</code> <code>int</code> <p>The minor version number.</p> <code>patch</code> <code>int</code> <p>The patch version number.</p> <code>rtype</code> <code>Optional[str]</code> <p>Release type if any.</p> <code>other</code> <code>Any</code> <p>Additional version information if any.</p> <code>regex_version</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to parse version strings.</p> <code>regex_branch</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to parse branch version strings.</p> <code>description</code> <code>str</code> <p>Brief description of the class purpose.</p>"},{"location":"api/models/version/#eos_downloader.models.version.EosVersion","title":"EosVersion","text":"<p>               Bases: <code>SemVer</code></p> <p>EosVersion object to play with version management in code.</p> <p>Since EOS is not using strictly semver approach, this class mimics some functions from the semver library for Arista EOS versions. It is based on Pydantic and provides helpers for comparison.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; version = EosVersion(major=4, minor=21, patch=1, rtype=\"M\")\n&gt;&gt;&gt; print(version)\nEosVersion(major=4, minor=21, patch=1, rtype='M', other=None)\n&gt;&gt;&gt; version = EosVersion.from_str('4.32.1F')\n&gt;&gt;&gt; print(version)\nEosVersion(major=4, minor=32, patch=1, rtype='F', other=None)\n</code></pre> <p>Attributes:</p> Name Type Description <code>major</code> <code>int</code> <p>Major version number, default is 4.</p> <code>minor</code> <code>int</code> <p>Minor version number, default is 0.</p> <code>patch</code> <code>int</code> <p>Patch version number, default is 0.</p> <code>rtype</code> <code>Optional[str]</code> <p>Release type, default is \u201cF\u201d.</p> <code>other</code> <code>Any</code> <p>Any other version information.</p> <code>regex_version</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract version information.</p> <code>regex_branch</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract branch information.</p> <code>description</code> <code>str</code> <p>A basic description of this class, default is \u201cA Generic SemVer implementation\u201d.</p>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer","title":"SemVer","text":"<p>               Bases: <code>BaseModel</code></p> <p>A class to represent a Semantic Version (SemVer) based on pydanntic.</p> <p>This class provides methods to parse, compare, and manipulate semantic versions. It supports standard semantic versioning with optional release type and additional version information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; version = SemVer(major=4, minor=23, patch=3, rtype=\"M\")\n&gt;&gt;&gt; str(version)\n'4.23.3M'\n</code></pre> <pre><code>&gt;&gt;&gt; version2 = SemVer.from_str('4.24.1F')\n&gt;&gt;&gt; version2.branch\n'4.24'\n</code></pre> <pre><code>&gt;&gt;&gt; version &lt; version2\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; version.match(\"&lt;=4.24.0\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; version.is_in_branch(\"4.23\")\nTrue\n</code></pre> <p>Attributes:</p> Name Type Description <code>major</code> <code>int</code> <p>Major version number.</p> <code>minor</code> <code>int</code> <p>Minor version number.</p> <code>patch</code> <code>int</code> <p>Patch version number.</p> <code>rtype</code> <code>Optional[str]</code> <p>Release type (e.g., \u2018M\u2019 for maintenance, \u2018F\u2019 for feature).</p> <code>other</code> <code>Any</code> <p>Additional version information.</p> <code>regex_version</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract version information.</p> <code>regex_branch</code> <code>ClassVar[Pattern[str]]</code> <p>Regular expression to extract branch information.</p> <code>description</code> <code>str</code> <p>A basic description of this class.</p>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.branch","title":"branch  <code>property</code>","text":"<pre><code>branch: str\n</code></pre> <p>Extract branch of version.</p> <p>Returns:</p> Type Description <code>str</code> <p>Branch from version.</p>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__eq__","title":"__eq__","text":"<pre><code>__eq__(other)\n</code></pre> <p>Implement eq function (==)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __eq__(self, other):\n    \"\"\"Implement __eq__ function (==)\"\"\"\n    return self._compare(other) == 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__ge__","title":"__ge__","text":"<pre><code>__ge__(other)\n</code></pre> <p>Implement ge function (&gt;=)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __ge__(self, other):\n    # type: ignore\n    \"\"\"Implement __ge__ function (&gt;=)\"\"\"\n    return self._compare(other) &gt;= 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__gt__","title":"__gt__","text":"<pre><code>__gt__(other)\n</code></pre> <p>Implement gt function (&gt;)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __gt__(self, other):\n    # type: ignore\n    \"\"\"Implement __gt__ function (&gt;)\"\"\"\n    return self._compare(other) &gt; 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__le__","title":"__le__","text":"<pre><code>__le__(other)\n</code></pre> <p>Implement le function (&lt;=)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __le__(self, other):\n    # type: ignore\n    \"\"\"Implement __le__ function (&lt;=)\"\"\"\n    return self._compare(other) &lt;= 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__lt__","title":"__lt__","text":"<pre><code>__lt__(other)\n</code></pre> <p>Implement lt function (&lt;)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __lt__(self, other):\n    # type: ignore\n    \"\"\"Implement __lt__ function (&lt;)\"\"\"\n    return self._compare(other) &lt; 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__ne__","title":"__ne__","text":"<pre><code>__ne__(other)\n</code></pre> <p>Implement nw function (!=)</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@typing.no_type_check\ndef __ne__(self, other):\n    # type: ignore\n    \"\"\"Implement __nw__ function (!=)\"\"\"\n    return self._compare(other) != 0\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Standard str representation.</p> <p>Return string for EOS version like 4.23.3M.</p> <p>Returns:</p> Type Description <code>str</code> <p>A standard EOS version string representing ...</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Standard str representation.\n\n    Return string for EOS version like 4.23.3M.\n\n    Returns\n    -------\n    str\n        A standard EOS version string representing &lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt;&lt;RTYPE&gt;.\n    \"\"\"\n    return f\"{self.major}.{self.minor}.{self.patch}{self.other if self.other is not None else ''}{self.rtype if self.rtype is not None else ''}\"\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(semver: str) -&gt; SemVer\n</code></pre> <p>Parse a string into a SemVer object.</p> <p>This method parses a semantic version string or branch name into a SemVer object. It supports both standard semver format (x.y.z) and branch format.</p> <p>Parameters:</p> Name Type Description Default <code>semver</code> <code>str</code> <p>The version string to parse. Can be either a semantic version string (e.g., \u201c1.2.3\u201d) or a branch format.</p> required <p>Returns:</p> Type Description <code>SemVer</code> <p>A SemVer object representing the parsed version. Returns an empty SemVer object if parsing fails.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SemVer.from_str(\"1.2.3\")\nSemVer(major=1, minor=2, patch=3)\n&gt;&gt;&gt; SemVer.from_str(\"branch-1.2.3\")\nSemVer(major=1, minor=2, patch=3)\n</code></pre> Source code in <code>eos_downloader/models/version.py</code> <pre><code>@classmethod\ndef from_str(cls, semver: str) -&gt; SemVer:\n    \"\"\"Parse a string into a SemVer object.\n\n    This method parses a semantic version string or branch name into a SemVer object.\n    It supports both standard semver format (x.y.z) and branch format.\n\n    Parameters\n    ----------\n    semver : str\n        The version string to parse. Can be either a semantic version\n        string (e.g., \"1.2.3\") or a branch format.\n\n    Returns\n    -------\n    SemVer\n        A SemVer object representing the parsed version.\n        Returns an empty SemVer object if parsing fails.\n\n    Examples\n    --------\n    &gt;&gt;&gt; SemVer.from_str(\"1.2.3\")\n    SemVer(major=1, minor=2, patch=3)\n    &gt;&gt;&gt; SemVer.from_str(\"branch-1.2.3\")\n    SemVer(major=1, minor=2, patch=3)\n    \"\"\"\n\n    logging.debug(f\"Creating SemVer object from string: {semver}\")\n\n    if cls.regex_version.match(semver):\n        matches = cls.regex_version.match(semver)\n        # assert matches is not None\n        assert matches is not None\n        logging.debug(f\"Matches version: {matches}\")\n        return cls(**matches.groupdict())\n    if cls.regex_branch.match(semver):\n        matches = cls.regex_branch.match(semver)\n        # assert matches is not None\n        assert matches is not None\n        logging.debug(f\"Matches branch: {matches}\")\n        return cls(**matches.groupdict())\n    logging.error(f\"Error occured with {semver}\")\n    return SemVer()\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.is_in_branch","title":"is_in_branch","text":"<pre><code>is_in_branch(branch_str: str) -&gt; bool\n</code></pre> <p>Check if current version is part of a branch version.</p> <p>Comparison is done across MAJOR and MINOR.</p> <p>Parameters:</p> Name Type Description Default <code>branch_str</code> <code>str</code> <p>A string for EOS branch. It supports following formats 4.23 or 4.23.0.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if current version is in provided branch, otherwise False.</p> Source code in <code>eos_downloader/models/version.py</code> <pre><code>def is_in_branch(self, branch_str: str) -&gt; bool:\n    \"\"\"\n    Check if current version is part of a branch version.\n\n    Comparison is done across MAJOR and MINOR.\n\n    Parameters\n    ----------\n    branch_str : str\n        A string for EOS branch. It supports following formats 4.23 or 4.23.0.\n\n    Returns\n    -------\n    bool\n        True if current version is in provided branch, otherwise False.\n    \"\"\"\n    logging.info(f\"Checking if {self} is in branch {branch_str}\")\n    try:\n        branch = SemVer.from_str(branch_str)\n    except Exception as error:  # pylint: disable = broad-exception-caught\n        logger.error(exc_to_str(error))\n    else:\n        return self.major == branch.major and self.minor == branch.minor\n    return False\n</code></pre>"},{"location":"api/models/version/#eos_downloader.models.version.SemVer.match","title":"match","text":"<pre><code>match(match_expr: str) -&gt; bool\n</code></pre> <p>Compare self to match a match expression.</p> <p>Parameters:</p> Name Type Description Default <code>match_expr</code> <code>str</code> <p>Optional operator and version; valid operators are:   <code>&lt;</code>   smaller than   <code>&gt;</code>   greater than   <code>&gt;=</code>  greater or equal than   <code>&lt;=</code>  smaller or equal than   <code>==</code>  equal   <code>!=</code>  not equal.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If input has no match_expr nor match_ver.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the expression matches the version, otherwise False.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; eos_version.match(\"&lt;=4.23.3M\")\nTrue\n&gt;&gt;&gt; eos_version.match(\"==4.23.3M\")\nFalse\n</code></pre> Source code in <code>eos_downloader/models/version.py</code> <pre><code>def match(self, match_expr: str) -&gt; bool:\n    \"\"\"\n    Compare self to match a match expression.\n\n    Parameters\n    ----------\n    match_expr : str\n        Optional operator and version; valid operators are:\n          ``&lt;``   smaller than\n          ``&gt;``   greater than\n          ``&gt;=``  greater or equal than\n          ``&lt;=``  smaller or equal than\n          ``==``  equal\n          ``!=``  not equal.\n\n    Raises\n    ------\n    ValueError\n        If input has no match_expr nor match_ver.\n\n    Returns\n    -------\n    bool\n        True if the expression matches the version, otherwise False.\n\n    Examples\n    --------\n    &gt;&gt;&gt; eos_version.match(\"&lt;=4.23.3M\")\n    True\n    &gt;&gt;&gt; eos_version.match(\"==4.23.3M\")\n    False\n    \"\"\"\n    prefix = match_expr[:2]\n    if prefix in (\"&gt;=\", \"&lt;=\", \"==\", \"!=\"):\n        match_version = match_expr[2:]\n    elif prefix and prefix[0] in (\"&gt;\", \"&lt;\"):\n        prefix = prefix[0]\n        match_version = match_expr[1:]\n    elif match_expr and match_expr[0] in \"0123456789\":\n        prefix = \"==\"\n        match_version = match_expr\n    else:\n        raise ValueError(\n            \"match_expr parameter should be in format &lt;op&gt;&lt;ver&gt;, \"\n            \"where &lt;op&gt; is one of \"\n            \"['&lt;', '&gt;', '==', '&lt;=', '&gt;=', '!=']. \"\n            f\"You provided: {match_expr}\"\n        )\n    possibilities_dict = {\n        \"&gt;\": (1,),\n        \"&lt;\": (-1,),\n        \"==\": (0,),\n        \"!=\": (-1, 1),\n        \"&gt;=\": (0, 1),\n        \"&lt;=\": (-1, 0),\n    }\n    possibilities = possibilities_dict[prefix]\n    cmp_res = self._compare(SemVer.from_str(match_version))\n\n    return cmp_res in possibilities\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/","title":"DOCS DEPLOYMENT CHANGELOG","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#documentation-deployment-system-change-log","title":"Documentation Deployment System - Change Log","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#2025-10-24-documentation-infrastructure-overhaul","title":"[2025-10-24] - Documentation Infrastructure Overhaul","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#summary","title":"\ud83c\udfaf Summary","text":"<p>Complete redesign of the documentation deployment system using MkDocs, mike, and GitHub Actions for automated, versioned documentation deployment to GitHub Pages.</p>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#new-features","title":"\u2728 New Features","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#github-actions-workflows","title":"GitHub Actions Workflows","text":"<ul> <li><code>deploy-docs.yml</code>: Unified workflow for all documentation deployments</li> <li>Automatic deployment on tag push (versioned releases)</li> <li>Automatic deployment on main branch push (development docs)</li> <li>Manual dispatch with custom version/alias support</li> <li>Intelligent version detection and aliasing</li> <li>Detailed deployment summaries</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#developer-tools","title":"Developer Tools","text":"<ul> <li><code>scripts/docs-helper.sh</code>: Interactive helper script for local documentation operations</li> <li>Serve documentation locally with live reload</li> <li>Build documentation with strict validation</li> <li>Test mike deployments without pushing</li> <li>List deployed versions</li> <li>Deploy, delete, and set default versions</li> <li> <p>Colored output and interactive prompts</p> </li> <li> <p>Makefile Targets: Convenient make commands for documentation tasks</p> </li> <li><code>make docs-serve</code>: Start local development server</li> <li><code>make docs-build</code>: Build and validate documentation</li> <li><code>make docs-test</code>: Test mike deployment locally</li> <li><code>make docs-list</code>: List all deployed versions</li> <li><code>make docs-deploy-dev</code>: Deploy development documentation</li> <li><code>make docs-deploy-stable VERSION=vX.Y.Z</code>: Deploy stable release</li> <li><code>make docs-delete VERSION=vX.Y.Z</code>: Delete a version</li> <li><code>make docs-clean</code>: Clean build directory</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li><code>docs/contributing/documentation-deployment.md</code>: Comprehensive deployment guide</li> <li>Version management strategy</li> <li>Workflow documentation</li> <li>Troubleshooting guide</li> <li>Best practices</li> <li>Security considerations</li> <li> <p>Workflow diagrams</p> </li> <li> <p><code>.github/workflows/README.md</code>: Complete workflow reference</p> </li> <li>All workflows documented</li> <li>Required secrets</li> <li>Workflow dependencies</li> <li>Common operations</li> <li> <p>Troubleshooting</p> </li> <li> <p><code>docs/contributing/docs-deployment-summary.md</code>: Executive summary</p> </li> <li>Architecture overview</li> <li>Changes made</li> <li>Benefits</li> <li>Usage examples</li> <li>Migration notes</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#modified","title":"\ud83d\udd04 Modified","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#workflows","title":"Workflows","text":"<ul> <li><code>check-docs.yml</code>: Enhanced with better mike testing</li> <li>Added git configuration for mike operations</li> <li>Improved test workflow</li> <li> <p>Better artifact handling</p> </li> <li> <p><code>release.yml</code>: Simplified documentation handling</p> </li> <li>Removed duplicate deployment logic</li> <li>Added informational step about automatic deployment</li> <li>Documentation deployment now handled by <code>deploy-docs.yml</code></li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#configuration","title":"Configuration","text":"<ul> <li><code>mkdocs.yml</code>: Updated navigation</li> <li>Added Contributing section</li> <li> <p>Linked new documentation pages</p> </li> <li> <p><code>Makefile</code>: Added documentation targets (see above)</p> </li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#removed","title":"\u274c Removed","text":"<ul> <li><code>.github/workflows/main-doc.yml</code>: Replaced by unified <code>deploy-docs.yml</code></li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#architecture-changes","title":"\ud83d\udcca Architecture Changes","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#before","title":"Before","text":"<pre><code>Tag Push \u2192 release.yml \u2192 Deploy docs\nMain Push \u2192 main-doc.yml \u2192 Deploy docs\n(Duplicate logic, no unified control)\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#after","title":"After","text":"<pre><code>Tag Push \u2192 deploy-docs.yml \u2192 Deploy as vX.Y.Z (alias: stable)\nMain Push \u2192 deploy-docs.yml \u2192 Deploy as main (alias: development)\nManual \u2192 deploy-docs.yml \u2192 Deploy custom version/alias\n(Single source of truth, unified workflow)\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#security-improvements","title":"\ud83d\udd12 Security Improvements","text":"<ul> <li>No long-lived secrets required</li> <li>Uses GitHub\u2019s automatic <code>GITHUB_TOKEN</code></li> <li>Scoped permissions (<code>contents: write</code> only for deployment)</li> <li>Clear audit trail in <code>gh-pages</code> branch</li> <li>Automatic secret masking</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#benefits","title":"\ud83d\udcc8 Benefits","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-developers","title":"For Developers","text":"<ul> <li>Local testing without pushing to gh-pages</li> <li>Helper script for common operations</li> <li>Makefile targets for convenience</li> <li>Clear error messages and validation</li> <li>Comprehensive documentation</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-maintainers","title":"For Maintainers","text":"<ul> <li>Automatic versioned releases</li> <li>Development docs always up-to-date</li> <li>Easy rollback capabilities</li> <li>Clear deployment history</li> <li>Manual deployment control when needed</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-users","title":"For Users","text":"<ul> <li>Version selector in documentation</li> <li>Stable version as default landing page</li> <li>Development version for latest features</li> <li>Fast, reliable documentation hosting</li> <li>Professional, polished documentation site</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#usage-examples","title":"\ud83c\udf93 Usage Examples","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#local-development","title":"Local Development","text":"<pre><code># Start development server\nmake docs-serve\n# or\n./scripts/docs-helper.sh serve\n\n# Build and validate\nmake docs-build\n\n# Test mike deployment\nmake docs-test\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#deploying-versions","title":"Deploying Versions","text":"<pre><code># Automatic (via git tag)\ngit tag v0.14.0\ngit push origin v0.14.0\n# \u2192 Triggers deploy-docs.yml automatically\n\n# Manual deployment\nmake docs-deploy-stable VERSION=v0.13.0\n# or\n./scripts/docs-helper.sh deploy v0.13.0 stable\n\n# Delete old version\nmake docs-delete VERSION=v0.10.0\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#checking-deployed-versions","title":"Checking Deployed Versions","text":"<pre><code>make docs-list\n# or\n./scripts/docs-helper.sh list\n</code></pre>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#testing-performed","title":"\ud83e\uddea Testing Performed","text":"<ul> <li> Documentation builds without errors</li> <li> Mike configuration validated</li> <li> Helper script functional</li> <li> Makefile targets work correctly</li> <li> Workflows have correct triggers</li> <li> Permissions properly scoped</li> <li> Local testing successful</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#migration-notes","title":"\ud83d\udcdd Migration Notes","text":""},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-existing-deployments","title":"For Existing Deployments","text":"<ul> <li>No action required</li> <li>Existing versions in gh-pages remain unchanged</li> <li>New deployments will use the unified workflow</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-contributors","title":"For Contributors","text":"<ul> <li>Review <code>docs/contributing/documentation-deployment.md</code></li> <li>Use helper script or Makefile for local operations</li> <li>Test documentation builds before submitting PRs</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#for-maintainers_1","title":"For Maintainers","text":"<ul> <li>Tag-based releases now automatically deploy documentation</li> <li>No manual documentation deployment needed</li> <li>Use workflow dispatch for custom deployments if needed</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#future-enhancements","title":"\ud83d\udd2e Future Enhancements","text":"<ul> <li>PR preview deployments</li> <li>Automated cleanup of old versions</li> <li>Multi-language support</li> <li>Broken link checking</li> <li>SEO optimization</li> <li>Analytics integration (optional)</li> <li>Performance monitoring</li> </ul>"},{"location":"changelogs/DOCS_DEPLOYMENT_CHANGELOG/#references","title":"\ud83d\udcda References","text":"<ul> <li>MkDocs Documentation</li> <li>Mike Documentation</li> <li>GitHub Actions Documentation</li> <li>GitHub Pages Documentation</li> </ul> <p>Implementation Date: 2025-10-24 Implemented By: GitHub Copilot Status: \u2705 Complete and Tested</p>"},{"location":"usage/cvp/","title":"Get CVP package","text":""},{"location":"usage/cvp/#download-cloudvision-package-from-arista-website","title":"Download CloudVision package from arista website","text":"<p>This command gives you option to download EOS images localy. Some options are available based on image type like importing your cEOS container in your local registry</p> <pre><code># Get latest version of CVP in Vvmware format\nardl get cvp --latest --format ova\n\n# Get latest version of CVP in upgrade format\nardl get eos --branch 4.29 --format upgrade\n</code></pre>"},{"location":"usage/cvp/#ardl-get-eos-options","title":"ardl get eos options","text":"<p>Below are all the options available to get EOS package:</p> <pre><code>$ ardl get cvp --help\nUsage: ardl get cvp [OPTIONS]\n\n  Download CVP image from Arista server.\n\nOptions:\n  --format TEXT   Image format  [env var: ARISTA_GET_CVP_FORMAT; default: ova]\n  --output PATH   Path to save image  [env var: ARISTA_GET_CVP_OUTPUT;\n                  default: .]\n  --latest        Get latest version. If --branch is not use, get the latest\n                  branch with specific release type  [env var:\n                  ARISTA_GET_CVP_LATEST]\n  --version TEXT  EOS version to download  [env var: ARISTA_GET_CVP_VERSION]\n  --branch TEXT   Branch to download  [env var: ARISTA_GET_CVP_BRANCH]\n  --dry-run       Enable dry-run mode: only run code without system changes\n  --help\n</code></pre> <p>Info</p> <p>You can get information about available version using the <code>ardl info version</code> cli</p>"},{"location":"usage/environment/","title":"Environment variables","text":""},{"location":"usage/environment/#environment-variables-in-eos-downloader","title":"Environment Variables in eos-downloader","text":""},{"location":"usage/environment/#overview","title":"Overview","text":"<p><code>ardl</code> is able to read environment variables to replace cli option to make it easier to work with in workflow. Even if all cli options can be replaced by environment variables, here are the most useful ones:</p> <p>Standard rule for these variables is:</p> <pre><code># root command\nARISTA_&lt;OPTION_NAME&gt;\n\n# First Level command\nARISTA_&lt;COMMAND_NAME&gt;_&lt;OPTION_NAME&gt;\n\n# Second level command\nARISTA_&lt;COMMAND_NAME&gt;_&lt;COMMAND_NAME&gt;_&lt;OPTION_NAME&gt;\n</code></pre> <p>How to get variable names</p> <p>Standard ENV variables are exposed in cli help and are visible with <code>[env var: ARISTA_GET_EOS_DOCKER_TAG]</code></p>"},{"location":"usage/environment/#standard-variables","title":"Standard Variables","text":"<p>Generic Options:</p> <ul> <li>ARISTA_TOKEN (<code>ardl --token</code>): Load your token and avoid to print your token in clear text during a workflow.</li> </ul> <p>EOS Options:</p> <ul> <li>ARISTA_GET_EOS_FORMAT (<code>ardl get eos --format</code>): Image format</li> <li>ARISTA_GET_EOS_OUTPUT (<code>ardl get eos --output</code>): Path to save EOS image.</li> <li>ARISTA_GET_EOS_VERSION (<code>ardl get eos --version</code>): Version to download from Arista server</li> <li>ARISTA_GET_EOS_BRANCH (<code>ardl get eos --latest</code>): Flag to retrieve latest version available from arista server.</li> <li>ARISTA_GET_EOS_BRANCH (<code>ardl get eos --branch</code>): Branch to download</li> <li>ARISTA_GET_EOS_EVE_NG (<code>ardl get eos --eve-ng</code>): Run EVE-NG vEOS provisioning (only if CLI runs on an EVE-NG server).</li> <li>ARISTA_GET_EOS_DOCKER_NAME (<code>ardl get eos --docker-name</code>): Docker image name when importing cEOS.</li> <li>ARISTA_GET_EOS_DOCKER_TAG (<code>ardl get eos --docker-tag</code>): Docker tag to use when cEOS image is imported in Docker.</li> <li>ARISTA_GET_EOS_RELEASE_TYPE (<code>ardl get eos --release-type</code>): Release type (M for Maintenance, F for Feature)</li> </ul> <p>CVP options:</p> <ul> <li>ARISTA_GET_CVP_FORMAT (<code>ardl get cvp --format</code>): Image format</li> <li>ARISTA_GET_CVP_OUTPUT (<code>ardl get cvp --output</code>): Path to save CVP image.</li> <li>ARISTA_GET_CVP_LATEST (<code>ardl get cvp --latest</code>): Flag to retrieve latest version available from arista server.</li> <li>ARISTA_GET_CVP_VERSION (<code>ardl get cvp --version</code>): Version to download from Arista server</li> <li>ARISTA_GET_CVP_BRANCH (<code>ardl get cvp --branch</code>): Branch to download</li> </ul>"},{"location":"usage/environment/#usage-examples","title":"Usage examples","text":"<ul> <li>Basic usage with <code>export</code></li> </ul> <pre><code># Use token from env variables\nexport ARISTA_TOKEN=1234567890\nardl info versions --branch 4.29\n</code></pre> <ul> <li>Usage with direnv</li> </ul> <pre><code>cat .envrc\nexport ARISTA_TOKEN=1234567890\n\ndirenv allow\ndirenv: loading .envrc\ndirenv: export +ARISTA_TOKEN\n\nardl info versions --branch 4.29\n</code></pre>"},{"location":"usage/eos/","title":"Get EOS package","text":""},{"location":"usage/eos/#download-eos-package-from-arista-website","title":"Download EOS package from arista website","text":"<p>This command gives you option to download EOS images localy. Some options are available based on image type like importing your cEOS container in your local registry</p> <pre><code># Get latest version of EOS using docker format.\nardl get eos --latest --format cEOS\n\n# Get latest version of maintenance type in specific branch 4.29\nardl get eos --branch 4.29 --format cEOS --release-type M\n\n# Get a specific version\nardl get eos --version 4.29.4M\n\n# Get a specific version and import to docker\n# using default arista/ceos:{version}{release_type}\nardl get eos --version 4.29.4M --import-docker\n\n# Get a specific version and import to EVE-NG\nardl get eos --version 4.33.0F --eve-ng\n\n# Force re-download even if file is cached\nardl get eos --version 4.29.4M --force\n\n# Force re-import of Docker image even if it exists\nardl get eos --version 4.29.4M --import-docker --force\n</code></pre>"},{"location":"usage/eos/#smart-caching","title":"Smart Caching","text":"<p>eos-downloader includes intelligent caching to avoid redundant downloads and Docker imports:</p>"},{"location":"usage/eos/#file-caching","title":"File Caching","text":"<ul> <li>By default, if a file already exists in the output directory, it will be reused instead of re-downloaded</li> <li>Saves bandwidth and time when running the same command multiple times</li> <li>Use <code>--force</code> to bypass the cache and force re-download</li> </ul> <pre><code># First run: downloads the file\nardl get eos --version 4.29.4M --output /downloads\n\n# Second run: uses cached file (no download)\nardl get eos --version 4.29.4M --output /downloads\n\n# Force re-download\nardl get eos --version 4.29.4M --output /downloads --force\n</code></pre>"},{"location":"usage/eos/#docker-image-caching","title":"Docker Image Caching","text":"<ul> <li>Before importing a cEOS image, eos-downloader checks if the image:tag already exists locally</li> <li>Skips the import if the image is already present</li> <li>Use <code>--force</code> to re-import even if the image exists</li> </ul> <pre><code># First run: downloads and imports to Docker\nardl get eos --version 4.29.4M --format cEOS --import-docker\n\n# Second run: file is cached, Docker image exists (no import)\nardl get eos --version 4.29.4M --format cEOS --import-docker\n\n# Force re-import\nardl get eos --version 4.29.4M --format cEOS --import-docker --force\n</code></pre>"},{"location":"usage/eos/#benefits","title":"Benefits","text":"<ul> <li>Faster iterations: Subsequent runs complete almost instantly</li> <li>Bandwidth savings: No redundant downloads</li> <li>Disk space optimization: Reuse existing files</li> <li>CI/CD friendly: Safe to run repeatedly without overhead</li> </ul> <p>Podman Support</p> <p>The Docker cache checking works with both <code>docker</code> and <code>podman</code> commands automatically.</p> <p>Cache Validation</p> <p>File caching currently uses simple existence checks. For production use, consider using checksums to verify file integrity after download.</p>"},{"location":"usage/eos/#ardl-get-eos-options","title":"ardl get eos options","text":"<p>Below are all the options available to get EOS package:</p> <pre><code>$ ardl get eos --help\nUsage: ardl get eos [OPTIONS]\n\n  Download EOS image from Arista server.\n\nOptions:\n  --format TEXT        Image format  [default: vmdk]\n  --output PATH        Path to save image  [env var: ARISTA_GET_EOS_OUTPUT;\n                       default: .]\n  --latest             Get latest version. If --branch is not use, get the\n                       latest branch with specific release type  [env var:\n                       ARISTA_GET_EOS_LATEST]\n  --eve-ng             Run EVE-NG vEOS provisioning (only if CLI runs on an\n                       EVE-NG server)  [env var: ARISTA_GET_EOS_EVE_NG]\n  --import-docker      Import docker image to local docker  [env var:\n                       ARISTA_GET_EOS_IMPORT_DOCKER]\n  --skip-download      Skip download process - for debug only\n  --docker-name TEXT   Docker image name  [env var:\n                       ARISTA_GET_EOS_DOCKER_NAME; default: arista/ceos]\n  --docker-tag TEXT    Docker image tag  [env var: ARISTA_GET_EOS_DOCKER_TAG]\n  --version TEXT       EOS version to download  [env var:\n                       ARISTA_GET_EOS_VERSION]\n  --release-type TEXT  Release type (M for Maintenance, F for Feature)  [env\n                       var: ARISTA_GET_EOS_RELEASE_TYPE; default: F]\n  --branch TEXT        Branch to download  [env var: ARISTA_GET_EOS_BRANCH]\n  --dry-run            Enable dry-run mode: only run code without system\n                       changes\n  --force              Force download/import even if cached files or Docker\n                       images exist  [env var: ARISTA_GET_EOS_FORCE]\n  --help               Show this message and exit.\n</code></pre> <p>Info</p> <p>You can get information about available version using the <code>ardl info version</code> cli</p>"},{"location":"usage/info/","title":"Version information","text":""},{"location":"usage/info/#get-information-about-softwares-versions","title":"Get information about softwares versions","text":"<p><code>ardl</code> comes with a tool to get version information from Arista website. It is valid for both CloudVision and EOS packages.</p>"},{"location":"usage/info/#get-information-about-available-versions","title":"Get information about available versions","text":"<pre><code>ardl info versions --help\nUsage: ardl info versions [OPTIONS]\n\n  List available versions of Arista packages (eos or CVP) packages\n\nOptions:\n  --format [json|text|fancy]  Output format\n  --package [eos|cvp]\n  -b, --branch TEXT\n  --release-type TEXT\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"usage/info/#usage-example","title":"Usage example","text":"<p>With this CLI, you can specify either a branch or a release type when applicable to filter information:</p>"},{"location":"usage/info/#fancy-format-default","title":"Fancy format (default)","text":"<pre><code># Get F version in branch 4.29 using default fancy mode\nardl info versions --branch 4.29 --release-type F\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Available versions \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                              \u2502\n\u2502   - version: 4.29.2F                                                         \u2502\n\u2502   - version: 4.29.1F                                                         \u2502\n\u2502   - version: 4.29.0.2F                                                       \u2502\n\u2502   - version: 4.29.2F                                                         \u2502\n\u2502   - version: 4.29.1F                                                         \u2502\n\u2502   - version: 4.29.0.2F                                                       \u2502\n\u2502                                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/info/#text-format","title":"Text Format","text":"<pre><code># Get M version in branch 4.29 using text output\n\u276f ardl info versions --branch 4.29 --release-type M --format text\nListing versions\n  - version: 4.29.10M\n  - version: 4.29.9.1M\n  - version: 4.29.9M\n  - version: 4.29.8M\n  - version: 4.29.7.1M\n  ...\n</code></pre>"},{"location":"usage/info/#json-format","title":"JSON format","text":"<p>You can also specify JSON as output format:</p> <pre><code>ardl info versions --branch 4.29 --release-type F --format json\n[\n  {\n    \"version\": \"4.29.2F\",\n    \"branch\": \"4.29\"\n  },\n  {\n    \"version\": \"4.29.1F\",\n    \"branch\": \"4.29\"\n  },\n  {\n    \"version\": \"4.29.0.2F\",\n    \"branch\": \"4.29\"\n  },\n  {\n    \"version\": \"4.29.2F\",\n    \"branch\": \"4.29\"\n  },\n  {\n    \"version\": \"4.29.1F\",\n    \"branch\": \"4.29\"\n  },\n  {\n    \"version\": \"4.29.0.2F\",\n    \"branch\": \"4.29\"\n  }\n]\n</code></pre>"},{"location":"usage/mapping/","title":"Software mapping","text":""},{"location":"usage/mapping/#get-information-about-software-mapping","title":"Get information about software mapping","text":"<p><code>ardl</code> comes with a tool to get all supoprted package format for both CVP and EOS softwares. It helps to know which format to use for a specific file extension.</p>"},{"location":"usage/mapping/#get-information-about-available-versions","title":"Get information about available versions","text":"<pre><code>$ ardl info mapping --help\nUsage: ardl info mapping [OPTIONS]\n\n  List available flavors of Arista packages (eos or CVP) packages.\n\nOptions:\n  --package [eos|cvp]\n  --format [json|text|fancy]  Output format\n  --details                   Show details for each flavor\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"usage/mapping/#usage-example","title":"Usage example","text":"<p>With this CLI, you can specify either a branch or a release type when applicable to filter information:</p> <pre><code># Get list of supported packages for EOS.\n$ ardl info mapping --package eos\nLog Level is: error\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Flavors \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                   \u2502\n\u2502    * Flavor: 64                                   \u2502\n\u2502    * Flavor: INT                                  \u2502\n\u2502    * Flavor: 2GB-INT                              \u2502\n\u2502    * Flavor: cEOS                                 \u2502\n\u2502    * Flavor: cEOS64                               \u2502\n\u2502    * Flavor: cEOSarm                              \u2502\n\u2502    * Flavor: vEOS                                 \u2502\n\u2502    * Flavor: vEOS-lab                             \u2502\n\u2502    * Flavor: EOS-2GB                              \u2502\n\u2502    * Flavor: RN                                   \u2502\n\u2502    * Flavor: SOURCE                               \u2502\n\u2502    * Flavor: default                              \u2502\n\u2502                                                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n# Get list of supported packages for EOS with filename information\n$ ardl info mapping --package eos --details\nLog Level is: error\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Flavors \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                                                                     \u2502\n\u2502    * Flavor: 64                                                     \u2502\n\u2502      - Information: extension='.swi' prepend='EOS64'                \u2502\n\u2502    * Flavor: INT                                                    \u2502\n\u2502      - Information: extension='-INT.swi' prepend='EOS'              \u2502\n\u2502    * Flavor: 2GB-INT                                                \u2502\n\u2502      - Information: extension='-INT.swi' prepend='EOS-2GB'          \u2502\n\u2502    * Flavor: cEOS                                                   \u2502\n\u2502      - Information: extension='.tar.xz' prepend='cEOS-lab'          \u2502\n\u2502    * Flavor: cEOS64                                                 \u2502\n\u2502      - Information: extension='.tar.xz' prepend='cEOS64-lab'        \u2502\n\u2502    * Flavor: cEOSarm                                                \u2502\n\u2502      - Information: extension='.tar.xz' prepend='cEOSarm-lab'       \u2502\n\u2502    * Flavor: vEOS                                                   \u2502\n\u2502      - Information: extension='.vmdk' prepend='vEOS'                \u2502\n\u2502    * Flavor: vEOS-lab                                               \u2502\n\u2502      - Information: extension='.vmdk' prepend='vEOS-lab'            \u2502\n\u2502    * Flavor: EOS-2GB                                                \u2502\n\u2502      - Information: extension='.swi' prepend='EOS-2GB'              \u2502\n\u2502    * Flavor: RN                                                     \u2502\n\u2502      - Information: extension='-' prepend='RN'                      \u2502\n\u2502    * Flavor: SOURCE                                                 \u2502\n\u2502      - Information: extension='-source.tar' prepend='EOS'           \u2502\n\u2502    * Flavor: default                                                \u2502\n\u2502      - Information: extension='.swi' prepend='EOS'                  \u2502\n\u2502                                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/path/","title":"Get Any package","text":""},{"location":"usage/path/#download-any-arista-package","title":"Download any arista package","text":"<p>This command gives an option for advanced users to download any packages available on arista website and using the standard authentication mechanism.</p> <p>Warning</p> <p>This command is for advanced user only</p> <pre><code># Get a package from arista server\nardl get path -s \"/support/path/to/docker/image/cEOS-lab-4.32.3M.tar.xz\"\n\n# Get a package from arista server and import into your docker engine\nardl get path -s \"/support/path/to/docker/image/cEOS-lab-4.32.3M.tar.xz\" --import-docker\n\n# Get a package from arista server and import into your docker engine with specific image and version\nardl get path -s \"/support/path/to/docker/image/cEOS-lab-4.32.3M.tar.xz\" --import-docker --docker-image arista/myceos --docker-version 4.32.3M\n</code></pre>"},{"location":"usage/path/#ardl-get-path-options","title":"ardl get path options","text":"<pre><code>$ ardl get path --help\nUsage: ardl get path [OPTIONS]\n\n  Download image from Arista server using direct path.\n\nOptions:\n  -s, --source TEXT   Image path to download from Arista Website\n  -o, --output PATH   Path to save downloaded package  [env var:\n                      ARISTA_GET_PATH_OUTPUT; default: .]\n  --import-docker     Import docker image to local docker  [env var:\n                      ARISTA_GET_PATH_IMPORT_DOCKER]\n  --docker-name TEXT  Docker image name  [env var:\n                      ARISTA_GET_PATH_DOCKER_NAME; default: arista/ceos:raw]\n  --docker-tag TEXT   Docker image tag  [env var: ARISTA_GET_PATH_DOCKER_TAG;\n                      default: dev]\n  --help              Show this message and exit.\n</code></pre>"}]}