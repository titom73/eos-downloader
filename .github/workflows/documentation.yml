---
name: Documentation

on:
  pull_request:
    branches:
    - main
    paths:
    - "docs/**"
    - "mkdocs.yml"
    - "eos_downloader/**"
    - "README.md"
  push:
    branches:
    - main
    paths:
    - "docs/**"
    - "mkdocs.yml"
    - "eos_downloader/**"
    - "README.md"
    tags:
    - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v0.13.0, main)'
        required: false
        default: 'main'
      alias:
        description: 'Alias to assign (e.g., stable, latest, development)'
        required: false
        default: ''

jobs:
  # Job 1: Build and validate documentation (runs always)
  build-and-validate:
    name: Build and validate documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Load default Python version
      id: python-version
      run: |
        DEFAULT_VERSION=$(cat .github/python-versions.json | jq -r '.default_version')
        echo "version=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
        echo "Using Python version: $DEFAULT_VERSION"

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ steps.python-version.outputs.version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[doc]

    - name: Build documentation
      run: |
        mkdocs build --strict --verbose --clean

    - name: Test mike configuration
      run: |
        # Configure git for mike (required even for local operations)
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        # Test mike deploy (creates local commit, no push)
        mike deploy test-build test

        # List versions to verify mike configuration
        mike list

        # Undo the test commit
        git reset --soft HEAD~1

    - name: Upload documentation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/
        retention-days: 7

  # Job 2: Deploy documentation (runs only on push to main or tags)
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: |
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Load default Python version
      id: python-version
      run: |
        DEFAULT_VERSION=$(cat .github/python-versions.json | jq -r '.default_version')
        echo "version=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
        echo "Using Python version: $DEFAULT_VERSION"

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ steps.python-version.outputs.version }}
        cache: 'pip'

    - name: Setup Git config
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[doc]

    - name: Determine version and alias
      id: version_info
      run: |
        # Determine if this is a tag push or branch push
        if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          # Extract version from tag (e.g., v0.13.0)
          VERSION="${{ github.ref_name }}"
          ALIAS="stable"
          IS_RELEASE="true"
          echo "Deploying release version: $VERSION with alias: $ALIAS"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # Main branch deployment
          VERSION="main"
          ALIAS="development"
          IS_RELEASE="false"
          echo "Deploying main branch as: $VERSION with alias: $ALIAS"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual dispatch
          VERSION="${{ github.event.inputs.version }}"
          ALIAS="${{ github.event.inputs.alias }}"
          IS_RELEASE="false"
          echo "Manual deployment: $VERSION with alias: $ALIAS"
        else
          echo "Unknown deployment trigger"
          exit 1
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "alias=$ALIAS" >> $GITHUB_OUTPUT
        echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

    - name: Deploy documentation with mike
      run: |
        VERSION="${{ steps.version_info.outputs.version }}"
        ALIAS="${{ steps.version_info.outputs.alias }}"

        if [[ -n "$ALIAS" ]]; then
          # Deploy with alias
          echo "Deploying $VERSION with alias $ALIAS"
          mike deploy --push --update-aliases "$VERSION" "$ALIAS"
        else
          # Deploy without alias
          echo "Deploying $VERSION without alias"
          mike deploy --push "$VERSION"
        fi

    - name: Set default version
      if: steps.version_info.outputs.is_release == 'true'
      run: |
        # For releases, set stable as the default landing page
        echo "Setting stable as default version"
        mike set-default --push stable

    - name: List deployed versions
      run: |
        echo "Currently deployed documentation versions:"
        mike list

    - name: Add deployment summary
      run: |
        VERSION="${{ steps.version_info.outputs.version }}"
        ALIAS="${{ steps.version_info.outputs.alias }}"
        IS_RELEASE="${{ steps.version_info.outputs.is_release }}"

        echo "## ðŸ“š Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Deployed:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
        if [[ -n "$ALIAS" ]]; then
          echo "- **Alias:** \`$ALIAS\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Deployment Type:** $(if [[ "$IS_RELEASE" == "true" ]]; then echo "Release"; else echo "Development"; fi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch/Tag:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View Documentation](https://${{ github.repository_owner }}.github.io/eos-downloader/)" >> $GITHUB_STEP_SUMMARY
        echo "- [View All Versions](https://${{ github.repository_owner }}.github.io/eos-downloader/versions/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ All Deployed Versions" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        mike list >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
