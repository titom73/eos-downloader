---
name: code-testing

# Permissions required for this workflow
permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:
    types: [assigned, opened, synchronize, reopened]
    paths:
      - '.github/python-versions.json'
      - 'pyproject.toml'
      - eos_downloader/**
      - tests/**
  workflow_dispatch:

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v5

      - name: Load Python versions from JSON
        id: set-versions
        run: |
          VERSIONS=$(cat .github/python-versions.json | jq -c '.versions')
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT
          echo "Loaded Python versions: $VERSIONS"

  check-sync:
    name: Verify Python versions are synchronized
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check Python versions synchronization
        run: |
          python .github/scripts/check-python-versions.py

      - name: Provide fix instructions if out of sync
        if: failure()
        run: |
          echo "::error::Python versions are out of sync between .github/python-versions.json and pyproject.toml"
          echo "::notice::To fix this, run: python .github/scripts/sync-python-versions.py"


  pre-commit:
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
    steps:
    - uses: actions/checkout@v5
    - uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - uses: pre-commit-ci/lite-action@v1.1.0

  compiling:
    name: Run installation process and code compilation supported Python versions
    runs-on: ubuntu-latest
    needs: [setup, pre-commit]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: install requirements
        run: |
          pip install .

      - name: install dev requirements
        run: pip install .[dev]

      - name: validate the syntax of python scripts
        run: |
          python -m py_compile $(git ls-files '*.py')

  linting:
    name: Run flake8, pylint for supported Python versions
    runs-on: ubuntu-latest
    needs: [setup, compiling]

    strategy:
      matrix:
        python: ${{ fromJson(needs.setup.outputs.python-versions) }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: pip install tox tox-gh-actions

      - name: "Run tox for ${{ matrix.python }}"
        run: tox -e lint

  typing:
    name: Run mypy for supported Python versions
    runs-on: ubuntu-latest
    needs: [setup, compiling]

    strategy:
      matrix:
        python: ${{ fromJson(needs.setup.outputs.python-versions) }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: pip install tox tox-gh-actions

      - name: "Run tox for ${{ matrix.python }}"
        run: tox -e type

  pytest:
    name: Run pytest validation
    runs-on: ubuntu-latest
    needs: [setup, linting, typing]

    strategy:
      matrix:
        python: ${{ fromJson(needs.setup.outputs.python-versions) }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: pip install tox tox-gh-actions

      - name: "Run tox for ${{ matrix.python }}"
        # run: tox -e testenv
        run: tox

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [setup, pytest]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - uses: actions/checkout@v5

      - name: Load default Python version
        id: python-version
        run: |
          DEFAULT_VERSION=$(cat .github/python-versions.json | jq -r '.default_version')
          echo "version=$DEFAULT_VERSION" >> $GITHUB_OUTPUT
          echo "Using Python version: $DEFAULT_VERSION"

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ steps.python-version.outputs.version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run tests with coverage
        run: |
          python -m pytest --cov=eos_downloader --cov-report=term-missing --cov-report=json --cov-branch tests/

      - name: Debug coverage file
        run: |
          echo "Checking if coverage.json exists..."
          ls -la coverage.json || echo "coverage.json not found"
          if [ -f coverage.json ]; then
            echo "Coverage file content:"
            cat coverage.json
          fi

      - name: Extract coverage percentage
        id: coverage
        run: |
          if [ -f coverage.json ]; then
            COVERAGE=$(python -c "import json; data=json.load(open('coverage.json')); print(data['totals']['percent_covered_display'] if 'totals' in data and 'percent_covered_display' in data['totals'] else '0')")
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage: $COVERAGE%"
          else
            echo "coverage.json not found, setting coverage to 0"
            echo "percentage=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let coverage, percentage, numStatements, coveredStatements, missingStatements;

            try {
              if (fs.existsSync('coverage.json')) {
                coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
                percentage = coverage.totals.percent_covered_display || 0;
                numStatements = coverage.totals.num_statements || 0;
                coveredStatements = coverage.totals.covered_lines || 0;
                missingStatements = coverage.totals.missing_lines || numStatements;
              } else {
                throw new Error('coverage.json not found');
              }
            } catch (error) {
              console.log('Error reading coverage file:', error);
              percentage = 0;
              numStatements = 0;
              coveredStatements = 0;
              missingStatements = 0;
            }

            const coverageEmoji = percentage >= 80 ? '✅' : percentage >= 60 ? '⚠️' : '❌';

            const message = `## ${coverageEmoji} Test Coverage Report

            **Overall Coverage**: **${percentage}%**

            | Metric | Value |
            |--------|-------|
            | Total Statements | ${numStatements} |
            | Covered | ${coveredStatements} |
            | Missing | ${missingStatements} |
            | Branch Coverage | ${percentage}% |

            ${percentage >= 80 ? '✅ Great job! Coverage meets the 80% target.' : ''}
            ${percentage >= 60 && percentage < 80 ? '⚠️ Coverage is acceptable but below the 80% target.' : ''}
            ${percentage < 60 ? '❌ Coverage is below 60%. Please add more tests.' : ''}

            ${percentage === 0 ? '⚠️ **Note**: Coverage appears to be 0% which may indicate a configuration issue or test discovery problem.' : ''}
            `;

            // Find existing coverage comment (optimized to retrieve only recent comments)
            // Sort by updated descending to get most recent comments first
            // Limit to 30 comments to avoid performance issues on large PRs
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 30,
              sort: 'updated',
              direction: 'desc'
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
              console.log('Updated existing coverage comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
              console.log('Created new coverage comment');
            }
